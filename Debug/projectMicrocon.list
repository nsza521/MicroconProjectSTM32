
projectMicrocon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000ba010  0800622c  0800622c  0000722c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080c023c  080c023c  000c2118  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080c023c  080c023c  000c123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080c0244  080c0244  000c2118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080c0244  080c0244  000c1244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080c0248  080c0248  000c1248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  080c024c  000c2000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000118  080c0364  000c2118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080c0364  000c2494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000c2118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001430a  00000000  00000000  000c2146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003628  00000000  00000000  000d6450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000d9a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee8  00000000  00000000  000dadc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ad5  00000000  00000000  000dbcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a626  00000000  00000000  00105785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100114  00000000  00000000  0011fdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021febf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b8  00000000  00000000  0021ff04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  002253bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000118 	.word	0x20000118
 800021c:	00000000 	.word	0x00000000
 8000220:	08006214 	.word	0x08006214

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000011c 	.word	0x2000011c
 800023c:	08006214 	.word	0x08006214

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	@ 0x2c
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4608      	mov	r0, r1
 8000616:	4611      	mov	r1, r2
 8000618:	461a      	mov	r2, r3
 800061a:	4623      	mov	r3, r4
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000632:	887b      	ldrh	r3, [r7, #2]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	f1c3 0301 	rsb	r3, r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000644:	e061      	b.n	800070a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000646:	88fa      	ldrh	r2, [r7, #6]
 8000648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	e018      	b.n	8000682 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	b298      	uxth	r0, r3
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	b29a      	uxth	r2, r3
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 fca7 	bl	8000fb4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	b298      	uxth	r0, r3
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	b29b      	uxth	r3, r3
 800066e:	88ba      	ldrh	r2, [r7, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	883a      	ldrh	r2, [r7, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	f000 fc9c 	bl	8000fb4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	88fa      	ldrh	r2, [r7, #6]
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	4413      	add	r3, r2
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	429a      	cmp	r2, r3
 800068c:	dde0      	ble.n	8000650 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	6a3b      	ldr	r3, [r7, #32]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e018      	b.n	80006ca <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	b298      	uxth	r0, r3
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069e:	b29a      	uxth	r2, r3
 80006a0:	88bb      	ldrh	r3, [r7, #4]
 80006a2:	4413      	add	r3, r2
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	883a      	ldrh	r2, [r7, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f000 fc83 	bl	8000fb4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	b298      	uxth	r0, r3
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	883a      	ldrh	r2, [r7, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	f000 fc78 	bl	8000fb4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	88fa      	ldrh	r2, [r7, #6]
 80006cc:	6a3b      	ldr	r3, [r7, #32]
 80006ce:	4413      	add	r3, r2
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dde0      	ble.n	8000698 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	3301      	adds	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	4413      	add	r3, r2
 80006e2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3302      	adds	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	005a      	lsls	r2, r3, #1
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	4413      	add	r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dd09      	ble.n	800070a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	3b01      	subs	r3, #1
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	4413      	add	r3, r2
 8000702:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	3302      	adds	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800070a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	429a      	cmp	r2, r3
 8000710:	da99      	bge.n	8000646 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	372c      	adds	r7, #44	@ 0x2c
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	4604      	mov	r4, r0
 8000724:	4608      	mov	r0, r1
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	4623      	mov	r3, r4
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	4603      	mov	r3, r0
 8000730:	80bb      	strh	r3, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	807b      	strh	r3, [r7, #2]
 8000736:	4613      	mov	r3, r2
 8000738:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000750:	887a      	ldrh	r2, [r7, #2]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	ee07 3a90 	vmov	s15, r3
 800075a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800075e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000762:	edd7 7a03 	vldr	s15, [r7, #12]
 8000766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076e:	d501      	bpl.n	8000774 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000770:	2301      	movs	r3, #1
 8000772:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000788:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800078c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000798:	d501      	bpl.n	800079e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 800079a:	2301      	movs	r3, #1
 800079c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800079e:	7cfb      	ldrb	r3, [r7, #19]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d104      	bne.n	80007ae <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80007a4:	887a      	ldrh	r2, [r7, #2]
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	82fb      	strh	r3, [r7, #22]
 80007ac:	e003      	b.n	80007b6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80007ae:	88fa      	ldrh	r2, [r7, #6]
 80007b0:	887b      	ldrh	r3, [r7, #2]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80007b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007b8:	8afa      	ldrh	r2, [r7, #22]
 80007ba:	88b9      	ldrh	r1, [r7, #4]
 80007bc:	88f8      	ldrh	r0, [r7, #6]
 80007be:	f000 fd2f 	bl	8001220 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80007c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007c4:	8afa      	ldrh	r2, [r7, #22]
 80007c6:	8839      	ldrh	r1, [r7, #0]
 80007c8:	88f8      	ldrh	r0, [r7, #6]
 80007ca:	f000 fd29 	bl	8001220 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80007ce:	7cbb      	ldrb	r3, [r7, #18]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d104      	bne.n	80007de <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80007d4:	883a      	ldrh	r2, [r7, #0]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	82bb      	strh	r3, [r7, #20]
 80007dc:	e003      	b.n	80007e6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 80007de:	88ba      	ldrh	r2, [r7, #4]
 80007e0:	883b      	ldrh	r3, [r7, #0]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80007e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007e8:	8aba      	ldrh	r2, [r7, #20]
 80007ea:	88b9      	ldrh	r1, [r7, #4]
 80007ec:	88f8      	ldrh	r0, [r7, #6]
 80007ee:	f000 fd5b 	bl	80012a8 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80007f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007f4:	8aba      	ldrh	r2, [r7, #20]
 80007f6:	88b9      	ldrh	r1, [r7, #4]
 80007f8:	8878      	ldrh	r0, [r7, #2]
 80007fa:	f000 fd55 	bl	80012a8 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 80007fe:	8afb      	ldrh	r3, [r7, #22]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000804:	8abb      	ldrh	r3, [r7, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 800080a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800080c:	8839      	ldrh	r1, [r7, #0]
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fbcf 	bl	8000fb4 <ILI9341_Draw_Pixel>
	}
	
}
 8000816:	bf00      	nop
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
	...

08000820 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af02      	add	r7, sp, #8
 8000826:	4604      	mov	r4, r0
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4623      	mov	r3, r4
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	4603      	mov	r3, r0
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	460b      	mov	r3, r1
 8000838:	717b      	strb	r3, [r7, #5]
 800083a:	4613      	mov	r3, r2
 800083c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b1f      	cmp	r3, #31
 8000846:	d802      	bhi.n	800084e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	3b20      	subs	r3, #32
 8000852:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000854:	2300      	movs	r3, #0
 8000856:	753b      	strb	r3, [r7, #20]
 8000858:	e012      	b.n	8000880 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800085a:	7dfa      	ldrb	r2, [r7, #23]
 800085c:	7d38      	ldrb	r0, [r7, #20]
 800085e:	7d39      	ldrb	r1, [r7, #20]
 8000860:	4c3b      	ldr	r4, [pc, #236]	@ (8000950 <ILI9341_Draw_Char+0x130>)
 8000862:	4613      	mov	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4423      	add	r3, r4
 800086c:	4403      	add	r3, r0
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	f101 0318 	add.w	r3, r1, #24
 8000874:	443b      	add	r3, r7
 8000876:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800087a:	7d3b      	ldrb	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	753b      	strb	r3, [r7, #20]
 8000880:	7d3b      	ldrb	r3, [r7, #20]
 8000882:	2b05      	cmp	r3, #5
 8000884:	d9e9      	bls.n	800085a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	b298      	uxth	r0, r3
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	b299      	uxth	r1, r3
 800088e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000890:	461a      	mov	r2, r3
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	b29a      	uxth	r2, r3
 800089a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	b29c      	uxth	r4, r3
 80008a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4623      	mov	r3, r4
 80008a6:	f000 fc5f 	bl	8001168 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	757b      	strb	r3, [r7, #21]
 80008ae:	e047      	b.n	8000940 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	75bb      	strb	r3, [r7, #22]
 80008b4:	e03e      	b.n	8000934 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	3318      	adds	r3, #24
 80008ba:	443b      	add	r3, r7
 80008bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80008c0:	461a      	mov	r2, r3
 80008c2:	7dbb      	ldrb	r3, [r7, #22]
 80008c4:	fa42 f303 	asr.w	r3, r2, r3
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d02e      	beq.n	800092e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80008d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d110      	bne.n	80008f8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	7d7b      	ldrb	r3, [r7, #21]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b298      	uxth	r0, r3
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	7dbb      	ldrb	r3, [r7, #22]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	887a      	ldrh	r2, [r7, #2]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f000 fb5f 	bl	8000fb4 <ILI9341_Draw_Pixel>
 80008f6:	e01a      	b.n	800092e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	7d7b      	ldrb	r3, [r7, #21]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000902:	fb11 f303 	smulbb	r3, r1, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b298      	uxth	r0, r3
 800090c:	797b      	ldrb	r3, [r7, #5]
 800090e:	b29a      	uxth	r2, r3
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	b29b      	uxth	r3, r3
 8000914:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000916:	fb11 f303 	smulbb	r3, r1, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b299      	uxth	r1, r3
 8000920:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000922:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	4623      	mov	r3, r4
 800092a:	f000 fc1d 	bl	8001168 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800092e:	7dbb      	ldrb	r3, [r7, #22]
 8000930:	3301      	adds	r3, #1
 8000932:	75bb      	strb	r3, [r7, #22]
 8000934:	7dbb      	ldrb	r3, [r7, #22]
 8000936:	2b07      	cmp	r3, #7
 8000938:	d9bd      	bls.n	80008b6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800093a:	7d7b      	ldrb	r3, [r7, #21]
 800093c:	3301      	adds	r3, #1
 800093e:	757b      	strb	r3, [r7, #21]
 8000940:	7d7b      	ldrb	r3, [r7, #21]
 8000942:	2b05      	cmp	r3, #5
 8000944:	d9b4      	bls.n	80008b0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	371c      	adds	r7, #28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	080062b8 	.word	0x080062b8

08000954 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4603      	mov	r3, r0
 8000964:	70fb      	strb	r3, [r7, #3]
 8000966:	460b      	mov	r3, r1
 8000968:	70bb      	strb	r3, [r7, #2]
 800096a:	4613      	mov	r3, r2
 800096c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800096e:	e017      	b.n	80009a0 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	7818      	ldrb	r0, [r3, #0]
 8000978:	883c      	ldrh	r4, [r7, #0]
 800097a:	78ba      	ldrb	r2, [r7, #2]
 800097c:	78f9      	ldrb	r1, [r7, #3]
 800097e:	8bbb      	ldrh	r3, [r7, #28]
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	8b3b      	ldrh	r3, [r7, #24]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4623      	mov	r3, r4
 8000988:	f7ff ff4a 	bl	8000820 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800098c:	8b3b      	ldrh	r3, [r7, #24]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	0052      	lsls	r2, r2, #1
 8000994:	4413      	add	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	4413      	add	r3, r2
 800099e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e3      	bne.n	8000970 <ILI9341_Draw_Text+0x1c>
    }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd90      	pop	{r4, r7, pc}
	...

080009b4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80009b8:	f001 fd7a 	bl	80024b0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80009bc:	f000 fd5a 	bl	8001474 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c6:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <ILI9341_SPI_Init+0x1c>)
 80009c8:	f002 fe9a 	bl	8003700 <HAL_GPIO_WritePin>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020800 	.word	0x40020800

080009d4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80009de:	1df9      	adds	r1, r7, #7
 80009e0:	2301      	movs	r3, #1
 80009e2:	2201      	movs	r2, #1
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <ILI9341_SPI_Send+0x20>)
 80009e6:	f004 f986 	bl	8004cf6 <HAL_SPI_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000294 	.word	0x20000294

080009f8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <ILI9341_Write_Command+0x40>)
 8000a0a:	f002 fe79 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <ILI9341_Write_Command+0x40>)
 8000a16:	f002 fe73 	bl	8003700 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffd9 	bl	80009d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <ILI9341_Write_Command+0x40>)
 8000a2a:	f002 fe69 	bl	8003700 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020800 	.word	0x40020800

08000a3c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <ILI9341_Write_Data+0x40>)
 8000a4e:	f002 fe57 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a58:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <ILI9341_Write_Data+0x40>)
 8000a5a:	f002 fe51 	bl	8003700 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffb7 	bl	80009d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a6c:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <ILI9341_Write_Data+0x40>)
 8000a6e:	f002 fe47 	bl	8003700 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020800 	.word	0x40020800

08000a80 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	4603      	mov	r3, r0
 8000a94:	80bb      	strh	r3, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	807b      	strh	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a9e:	202a      	movs	r0, #42	@ 0x2a
 8000aa0:	f7ff ffaa 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ffc5 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffc0 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffb9 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffb4 	bl	8000a3c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000ad4:	202b      	movs	r0, #43	@ 0x2b
 8000ad6:	f7ff ff8f 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ffaa 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ffa5 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000af2:	883b      	ldrh	r3, [r7, #0]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff9e 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000b00:	883b      	ldrh	r3, [r7, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff99 	bl	8000a3c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000b0a:	202c      	movs	r0, #44	@ 0x2c
 8000b0c:	f7ff ff74 	bl	80009f8 <ILI9341_Write_Command>
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}

08000b18 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <ILI9341_Reset+0x38>)
 8000b24:	f002 fdec 	bl	8003700 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b28:	20c8      	movs	r0, #200	@ 0xc8
 8000b2a:	f001 fee9 	bl	8002900 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b34:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <ILI9341_Reset+0x38>)
 8000b36:	f002 fde3 	bl	8003700 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b3a:	20c8      	movs	r0, #200	@ 0xc8
 8000b3c:	f001 fee0 	bl	8002900 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b46:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <ILI9341_Reset+0x38>)
 8000b48:	f002 fdda 	bl	8003700 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40020800 	.word	0x40020800

08000b54 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000b62:	2036      	movs	r0, #54	@ 0x36
 8000b64:	f7ff ff48 	bl	80009f8 <ILI9341_Write_Command>
HAL_Delay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f001 fec9 	bl	8002900 <HAL_Delay>
	
switch(screen_rotation) 
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d837      	bhi.n	8000be4 <ILI9341_Set_Rotation+0x90>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <ILI9341_Set_Rotation+0x28>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000ba3 	.word	0x08000ba3
 8000b84:	08000bb9 	.word	0x08000bb9
 8000b88:	08000bcf 	.word	0x08000bcf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b8c:	2048      	movs	r0, #72	@ 0x48
 8000b8e:	f7ff ff55 	bl	8000a3c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <ILI9341_Set_Rotation+0x9c>)
 8000b94:	22f0      	movs	r2, #240	@ 0xf0
 8000b96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <ILI9341_Set_Rotation+0xa0>)
 8000b9a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000b9e:	801a      	strh	r2, [r3, #0]
			break;
 8000ba0:	e021      	b.n	8000be6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000ba2:	2028      	movs	r0, #40	@ 0x28
 8000ba4:	f7ff ff4a 	bl	8000a3c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <ILI9341_Set_Rotation+0x9c>)
 8000baa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <ILI9341_Set_Rotation+0xa0>)
 8000bb2:	22f0      	movs	r2, #240	@ 0xf0
 8000bb4:	801a      	strh	r2, [r3, #0]
			break;
 8000bb6:	e016      	b.n	8000be6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000bb8:	2088      	movs	r0, #136	@ 0x88
 8000bba:	f7ff ff3f 	bl	8000a3c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <ILI9341_Set_Rotation+0x9c>)
 8000bc0:	22f0      	movs	r2, #240	@ 0xf0
 8000bc2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <ILI9341_Set_Rotation+0xa0>)
 8000bc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bca:	801a      	strh	r2, [r3, #0]
			break;
 8000bcc:	e00b      	b.n	8000be6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000bce:	20e8      	movs	r0, #232	@ 0xe8
 8000bd0:	f7ff ff34 	bl	8000a3c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <ILI9341_Set_Rotation+0x9c>)
 8000bd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <ILI9341_Set_Rotation+0xa0>)
 8000bde:	22f0      	movs	r2, #240	@ 0xf0
 8000be0:	801a      	strh	r2, [r3, #0]
			break;
 8000be2:	e000      	b.n	8000be6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000be4:	bf00      	nop
	}
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000002 	.word	0x20000002
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c02:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <ILI9341_Enable+0x14>)
 8000c04:	f002 fd7c 	bl	8003700 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40020800 	.word	0x40020800

08000c10 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000c14:	f7ff fff0 	bl	8000bf8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000c18:	f7ff fecc 	bl	80009b4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000c1c:	f7ff ff7c 	bl	8000b18 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fee9 	bl	80009f8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2a:	f001 fe69 	bl	8002900 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000c2e:	20cb      	movs	r0, #203	@ 0xcb
 8000c30:	f7ff fee2 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c34:	2039      	movs	r0, #57	@ 0x39
 8000c36:	f7ff ff01 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c3a:	202c      	movs	r0, #44	@ 0x2c
 8000c3c:	f7ff fefe 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff fefb 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000c46:	2034      	movs	r0, #52	@ 0x34
 8000c48:	f7ff fef8 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fef5 	bl	8000a3c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000c52:	20cf      	movs	r0, #207	@ 0xcf
 8000c54:	f7ff fed0 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff feef 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000c5e:	20c1      	movs	r0, #193	@ 0xc1
 8000c60:	f7ff feec 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000c64:	2030      	movs	r0, #48	@ 0x30
 8000c66:	f7ff fee9 	bl	8000a3c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000c6a:	20e8      	movs	r0, #232	@ 0xe8
 8000c6c:	f7ff fec4 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000c70:	2085      	movs	r0, #133	@ 0x85
 8000c72:	f7ff fee3 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fee0 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c7c:	2078      	movs	r0, #120	@ 0x78
 8000c7e:	f7ff fedd 	bl	8000a3c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c82:	20ea      	movs	r0, #234	@ 0xea
 8000c84:	f7ff feb8 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fed7 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fed4 	bl	8000a3c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c94:	20ed      	movs	r0, #237	@ 0xed
 8000c96:	f7ff feaf 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c9a:	2064      	movs	r0, #100	@ 0x64
 8000c9c:	f7ff fece 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f7ff fecb 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000ca6:	2012      	movs	r0, #18
 8000ca8:	f7ff fec8 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000cac:	2081      	movs	r0, #129	@ 0x81
 8000cae:	f7ff fec5 	bl	8000a3c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000cb2:	20f7      	movs	r0, #247	@ 0xf7
 8000cb4:	f7ff fea0 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000cb8:	2020      	movs	r0, #32
 8000cba:	f7ff febf 	bl	8000a3c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000cbe:	20c0      	movs	r0, #192	@ 0xc0
 8000cc0:	f7ff fe9a 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000cc4:	2023      	movs	r0, #35	@ 0x23
 8000cc6:	f7ff feb9 	bl	8000a3c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000cca:	20c1      	movs	r0, #193	@ 0xc1
 8000ccc:	f7ff fe94 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f7ff feb3 	bl	8000a3c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000cd6:	20c5      	movs	r0, #197	@ 0xc5
 8000cd8:	f7ff fe8e 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000cdc:	203e      	movs	r0, #62	@ 0x3e
 8000cde:	f7ff fead 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000ce2:	2028      	movs	r0, #40	@ 0x28
 8000ce4:	f7ff feaa 	bl	8000a3c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000ce8:	20c7      	movs	r0, #199	@ 0xc7
 8000cea:	f7ff fe85 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000cee:	2086      	movs	r0, #134	@ 0x86
 8000cf0:	f7ff fea4 	bl	8000a3c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000cf4:	2036      	movs	r0, #54	@ 0x36
 8000cf6:	f7ff fe7f 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000cfa:	2048      	movs	r0, #72	@ 0x48
 8000cfc:	f7ff fe9e 	bl	8000a3c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000d00:	203a      	movs	r0, #58	@ 0x3a
 8000d02:	f7ff fe79 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000d06:	2055      	movs	r0, #85	@ 0x55
 8000d08:	f7ff fe98 	bl	8000a3c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000d0c:	20b1      	movs	r0, #177	@ 0xb1
 8000d0e:	f7ff fe73 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe92 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000d18:	2018      	movs	r0, #24
 8000d1a:	f7ff fe8f 	bl	8000a3c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000d1e:	20b6      	movs	r0, #182	@ 0xb6
 8000d20:	f7ff fe6a 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000d24:	2008      	movs	r0, #8
 8000d26:	f7ff fe89 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000d2a:	2082      	movs	r0, #130	@ 0x82
 8000d2c:	f7ff fe86 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d30:	2027      	movs	r0, #39	@ 0x27
 8000d32:	f7ff fe83 	bl	8000a3c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d36:	20f2      	movs	r0, #242	@ 0xf2
 8000d38:	f7ff fe5e 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fe7d 	bl	8000a3c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000d42:	2026      	movs	r0, #38	@ 0x26
 8000d44:	f7ff fe58 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff fe77 	bl	8000a3c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000d4e:	20e0      	movs	r0, #224	@ 0xe0
 8000d50:	f7ff fe52 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000d54:	200f      	movs	r0, #15
 8000d56:	f7ff fe71 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d5a:	2031      	movs	r0, #49	@ 0x31
 8000d5c:	f7ff fe6e 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000d60:	202b      	movs	r0, #43	@ 0x2b
 8000d62:	f7ff fe6b 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d66:	200c      	movs	r0, #12
 8000d68:	f7ff fe68 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d6c:	200e      	movs	r0, #14
 8000d6e:	f7ff fe65 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d72:	2008      	movs	r0, #8
 8000d74:	f7ff fe62 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000d78:	204e      	movs	r0, #78	@ 0x4e
 8000d7a:	f7ff fe5f 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d7e:	20f1      	movs	r0, #241	@ 0xf1
 8000d80:	f7ff fe5c 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d84:	2037      	movs	r0, #55	@ 0x37
 8000d86:	f7ff fe59 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f7ff fe56 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d90:	2010      	movs	r0, #16
 8000d92:	f7ff fe53 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff fe50 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d9c:	200e      	movs	r0, #14
 8000d9e:	f7ff fe4d 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000da2:	2009      	movs	r0, #9
 8000da4:	f7ff fe4a 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fe47 	bl	8000a3c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000dae:	20e1      	movs	r0, #225	@ 0xe1
 8000db0:	f7ff fe22 	bl	80009f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fe41 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000dba:	200e      	movs	r0, #14
 8000dbc:	f7ff fe3e 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f7ff fe3b 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f7ff fe38 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000dcc:	2011      	movs	r0, #17
 8000dce:	f7ff fe35 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f7ff fe32 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dd8:	2031      	movs	r0, #49	@ 0x31
 8000dda:	f7ff fe2f 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000dde:	20c1      	movs	r0, #193	@ 0xc1
 8000de0:	f7ff fe2c 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000de4:	2048      	movs	r0, #72	@ 0x48
 8000de6:	f7ff fe29 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dea:	2008      	movs	r0, #8
 8000dec:	f7ff fe26 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f7ff fe23 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000df6:	200c      	movs	r0, #12
 8000df8:	f7ff fe20 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dfc:	2031      	movs	r0, #49	@ 0x31
 8000dfe:	f7ff fe1d 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000e02:	2036      	movs	r0, #54	@ 0x36
 8000e04:	f7ff fe1a 	bl	8000a3c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f7ff fe17 	bl	8000a3c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000e0e:	2011      	movs	r0, #17
 8000e10:	f7ff fdf2 	bl	80009f8 <ILI9341_Write_Command>
HAL_Delay(120);
 8000e14:	2078      	movs	r0, #120	@ 0x78
 8000e16:	f001 fd73 	bl	8002900 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000e1a:	2029      	movs	r0, #41	@ 0x29
 8000e1c:	f7ff fdec 	bl	80009f8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fe97 	bl	8000b54 <ILI9341_Set_Rotation>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e30:	b08d      	sub	sp, #52	@ 0x34
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	6039      	str	r1, [r7, #0]
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	466b      	mov	r3, sp
 8000e3c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e4a:	d202      	bcs.n	8000e52 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e50:	e002      	b.n	8000e58 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000e52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5e:	4840      	ldr	r0, [pc, #256]	@ (8000f60 <ILI9341_Draw_Colour_Burst+0x134>)
 8000e60:	f002 fc4e 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6a:	483d      	ldr	r0, [pc, #244]	@ (8000f60 <ILI9341_Draw_Colour_Burst+0x134>)
 8000e6c:	f002 fc48 	bl	8003700 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	2300      	movs	r3, #0
 8000e84:	4688      	mov	r8, r1
 8000e86:	4699      	mov	r9, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	00eb      	lsls	r3, r5, #3
 8000eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000eb0:	00e2      	lsls	r2, r4, #3
 8000eb2:	1dcb      	adds	r3, r1, #7
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	ebad 0d03 	sub.w	sp, sp, r3
 8000ebc:	466b      	mov	r3, sp
 8000ebe:	3300      	adds	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ec6:	e00e      	b.n	8000ee6 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ecc:	4413      	add	r3, r2
 8000ece:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ed2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	b2d1      	uxtb	r1, r2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3ec      	bcc.n	8000ec8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f08:	fb01 f202 	mul.w	r2, r1, r2
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d010      	beq.n	8000f38 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f1a:	e009      	b.n	8000f30 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	230a      	movs	r3, #10
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <ILI9341_Draw_Colour_Burst+0x138>)
 8000f26:	f003 fee6 	bl	8004cf6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3f1      	bcc.n	8000f1c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <ILI9341_Draw_Colour_Burst+0x138>)
 8000f42:	f003 fed8 	bl	8004cf6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <ILI9341_Draw_Colour_Burst+0x134>)
 8000f4e:	f002 fbd7 	bl	8003700 <HAL_GPIO_WritePin>
 8000f52:	46b5      	mov	sp, r6
}
 8000f54:	bf00      	nop
 8000f56:	3734      	adds	r7, #52	@ 0x34
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020800 	.word	0x40020800
 8000f64:	20000294 	.word	0x20000294

08000f68 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <ILI9341_Fill_Screen+0x44>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <ILI9341_Fill_Screen+0x48>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fd7d 	bl	8000a80 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <ILI9341_Fill_Screen+0x44>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <ILI9341_Fill_Screen+0x48>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff44 	bl	8000e2c <ILI9341_Draw_Colour_Burst>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000002 	.word	0x20000002
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000fc6:	4b64      	ldr	r3, [pc, #400]	@ (8001158 <ILI9341_Draw_Pixel+0x1a4>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	88fa      	ldrh	r2, [r7, #6]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f080 80be 	bcs.w	8001150 <ILI9341_Draw_Pixel+0x19c>
 8000fd4:	4b61      	ldr	r3, [pc, #388]	@ (800115c <ILI9341_Draw_Pixel+0x1a8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	88ba      	ldrh	r2, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f080 80b7 	bcs.w	8001150 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe8:	485d      	ldr	r0, [pc, #372]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8000fea:	f002 fb89 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff4:	485a      	ldr	r0, [pc, #360]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8000ff6:	f002 fb83 	bl	8003700 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000ffa:	202a      	movs	r0, #42	@ 0x2a
 8000ffc:	f7ff fcea 	bl	80009d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001006:	4856      	ldr	r0, [pc, #344]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001008:	f002 fb7a 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	4853      	ldr	r0, [pc, #332]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001014:	f002 fb74 	bl	8003700 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4850      	ldr	r0, [pc, #320]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001020:	f002 fb6e 	bl	8003700 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	753b      	strb	r3, [r7, #20]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	757b      	strb	r3, [r7, #21]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	3301      	adds	r3, #1
 8001038:	121b      	asrs	r3, r3, #8
 800103a:	b2db      	uxtb	r3, r3
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001048:	f107 0114 	add.w	r1, r7, #20
 800104c:	2301      	movs	r3, #1
 800104e:	2204      	movs	r2, #4
 8001050:	4844      	ldr	r0, [pc, #272]	@ (8001164 <ILI9341_Draw_Pixel+0x1b0>)
 8001052:	f003 fe50 	bl	8004cf6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105c:	4840      	ldr	r0, [pc, #256]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 800105e:	f002 fb4f 	bl	8003700 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001068:	483d      	ldr	r0, [pc, #244]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 800106a:	f002 fb49 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001074:	483a      	ldr	r0, [pc, #232]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001076:	f002 fb43 	bl	8003700 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800107a:	202b      	movs	r0, #43	@ 0x2b
 800107c:	f7ff fcaa 	bl	80009d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001086:	4836      	ldr	r0, [pc, #216]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001088:	f002 fb3a 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001092:	4833      	ldr	r0, [pc, #204]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001094:	f002 fb34 	bl	8003700 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109e:	4830      	ldr	r0, [pc, #192]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 80010a0:	f002 fb2e 	bl	8003700 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	743b      	strb	r3, [r7, #16]
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	747b      	strb	r3, [r7, #17]
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	3301      	adds	r3, #1
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	74bb      	strb	r3, [r7, #18]
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80010c8:	f107 0110 	add.w	r1, r7, #16
 80010cc:	2301      	movs	r3, #1
 80010ce:	2204      	movs	r2, #4
 80010d0:	4824      	ldr	r0, [pc, #144]	@ (8001164 <ILI9341_Draw_Pixel+0x1b0>)
 80010d2:	f003 fe10 	bl	8004cf6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	4820      	ldr	r0, [pc, #128]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 80010de:	f002 fb0f 	bl	8003700 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e8:	481d      	ldr	r0, [pc, #116]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 80010ea:	f002 fb09 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f4:	481a      	ldr	r0, [pc, #104]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 80010f6:	f002 fb03 	bl	8003700 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80010fa:	202c      	movs	r0, #44	@ 0x2c
 80010fc:	f7ff fc6a 	bl	80009d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001106:	4816      	ldr	r0, [pc, #88]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001108:	f002 fafa 	bl	8003700 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001112:	4813      	ldr	r0, [pc, #76]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001114:	f002 faf4 	bl	8003700 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 8001120:	f002 faee 	bl	8003700 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	733b      	strb	r3, [r7, #12]
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001134:	f107 010c 	add.w	r1, r7, #12
 8001138:	2301      	movs	r3, #1
 800113a:	2202      	movs	r2, #2
 800113c:	4809      	ldr	r0, [pc, #36]	@ (8001164 <ILI9341_Draw_Pixel+0x1b0>)
 800113e:	f003 fdda 	bl	8004cf6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <ILI9341_Draw_Pixel+0x1ac>)
 800114a:	f002 fad9 	bl	8003700 <HAL_GPIO_WritePin>
 800114e:	e000      	b.n	8001152 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001150:	bf00      	nop
	
}
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000002 	.word	0x20000002
 800115c:	20000000 	.word	0x20000000
 8001160:	40020800 	.word	0x40020800
 8001164:	20000294 	.word	0x20000294

08001168 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001186:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <ILI9341_Draw_Rectangle+0xb0>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d23d      	bcs.n	800120e <ILI9341_Draw_Rectangle+0xa6>
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <ILI9341_Draw_Rectangle+0xb4>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d237      	bcs.n	800120e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <ILI9341_Draw_Rectangle+0xb0>)
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	b292      	uxth	r2, r2
 80011aa:	4293      	cmp	r3, r2
 80011ac:	dd05      	ble.n	80011ba <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <ILI9341_Draw_Rectangle+0xb0>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80011ba:	88ba      	ldrh	r2, [r7, #4]
 80011bc:	883b      	ldrh	r3, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a16      	ldr	r2, [pc, #88]	@ (800121c <ILI9341_Draw_Rectangle+0xb4>)
 80011c2:	8812      	ldrh	r2, [r2, #0]
 80011c4:	b292      	uxth	r2, r2
 80011c6:	4293      	cmp	r3, r2
 80011c8:	dd05      	ble.n	80011d6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <ILI9341_Draw_Rectangle+0xb4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80011d6:	88fa      	ldrh	r2, [r7, #6]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29c      	uxth	r4, r3
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	883b      	ldrh	r3, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	88b9      	ldrh	r1, [r7, #4]
 80011f0:	88f8      	ldrh	r0, [r7, #6]
 80011f2:	4622      	mov	r2, r4
 80011f4:	f7ff fc44 	bl	8000a80 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80011f8:	883b      	ldrh	r3, [r7, #0]
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	fb02 f303 	mul.w	r3, r2, r3
 8001200:	461a      	mov	r2, r3
 8001202:	8b3b      	ldrh	r3, [r7, #24]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe10 	bl	8000e2c <ILI9341_Draw_Colour_Burst>
 800120c:	e000      	b.n	8001210 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800120e:	bf00      	nop
}
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	bf00      	nop
 8001218:	20000002 	.word	0x20000002
 800121c:	20000000 	.word	0x20000000

08001220 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	4611      	mov	r1, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4623      	mov	r3, r4
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	4603      	mov	r3, r0
 8001234:	80bb      	strh	r3, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]
 800123a:	4613      	mov	r3, r2
 800123c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	429a      	cmp	r2, r3
 8001248:	d225      	bcs.n	8001296 <ILI9341_Draw_Horizontal_Line+0x76>
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <ILI9341_Draw_Horizontal_Line+0x84>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d21f      	bcs.n	8001296 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	4413      	add	r3, r2
 800125c:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <ILI9341_Draw_Horizontal_Line+0x80>)
 800125e:	8812      	ldrh	r2, [r2, #0]
 8001260:	b292      	uxth	r2, r2
 8001262:	4293      	cmp	r3, r2
 8001264:	dd05      	ble.n	8001272 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	88b9      	ldrh	r1, [r7, #4]
 8001282:	88f8      	ldrh	r0, [r7, #6]
 8001284:	f7ff fbfc 	bl	8000a80 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdcc 	bl	8000e2c <ILI9341_Draw_Colour_Burst>
 8001294:	e000      	b.n	8001298 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001296:	bf00      	nop
}
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000002 	.word	0x20000002
 80012a4:	20000000 	.word	0x20000000

080012a8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <ILI9341_Draw_Vertical_Line+0x80>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	88fa      	ldrh	r2, [r7, #6]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d225      	bcs.n	800131e <ILI9341_Draw_Vertical_Line+0x76>
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <ILI9341_Draw_Vertical_Line+0x84>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	88ba      	ldrh	r2, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d21f      	bcs.n	800131e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 80012de:	88ba      	ldrh	r2, [r7, #4]
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a11      	ldr	r2, [pc, #68]	@ (800132c <ILI9341_Draw_Vertical_Line+0x84>)
 80012e6:	8812      	ldrh	r2, [r2, #0]
 80012e8:	b292      	uxth	r2, r2
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dd05      	ble.n	80012fa <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <ILI9341_Draw_Vertical_Line+0x84>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80012fa:	88ba      	ldrh	r2, [r7, #4]
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	88b9      	ldrh	r1, [r7, #4]
 800130a:	88f8      	ldrh	r0, [r7, #6]
 800130c:	f7ff fbb8 	bl	8000a80 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd88 	bl	8000e2c <ILI9341_Draw_Colour_Burst>
 800131c:	e000      	b.n	8001320 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800131e:	bf00      	nop
}
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	20000002 	.word	0x20000002
 800132c:	20000000 	.word	0x20000000

08001330 <TP_Touchpad_Pressed>:
		}
}

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001334:	2104      	movs	r1, #4
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <TP_Touchpad_Pressed+0x1c>)
 8001338:	f002 f9ca 	bl	80036d0 <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001346:	2300      	movs	r3, #0
	}
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000

08001350 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <MX_ADC1_Init+0x9c>)
 8001366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_ADC1_Init+0x98>)
 800136a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800136e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_ADC1_Init+0x98>)
 800137e:	2201      	movs	r2, #1
 8001380:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001392:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <MX_ADC1_Init+0xa0>)
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_ADC1_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_ADC1_Init+0x98>)
 800139e:	2201      	movs	r2, #1
 80013a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_ADC1_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b0:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_ADC1_Init+0x98>)
 80013b2:	f001 fac9 	bl	8002948 <HAL_ADC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013bc:	f001 f82a 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013c0:	230a      	movs	r3, #10
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_ADC1_Init+0x98>)
 80013d2:	f001 fc97 	bl	8002d04 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013dc:	f001 f81a 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000134 	.word	0x20000134
 80013ec:	40012000 	.word	0x40012000
 80013f0:	0f000001 	.word	0x0f000001

080013f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <HAL_ADC_MspInit+0x74>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d123      	bne.n	800145e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_ADC_MspInit+0x78>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	4a14      	ldr	r2, [pc, #80]	@ (800146c <HAL_ADC_MspInit+0x78>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001420:	6453      	str	r3, [r2, #68]	@ 0x44
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x78>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_ADC_MspInit+0x78>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <HAL_ADC_MspInit+0x78>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_ADC_MspInit+0x78>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_ADC_MspInit+0x7c>)
 800145a:	f001 ff8d 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800

08001474 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	@ 0x30
 8001478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	4b60      	ldr	r3, [pc, #384]	@ (800160c <MX_GPIO_Init+0x198>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a5f      	ldr	r2, [pc, #380]	@ (800160c <MX_GPIO_Init+0x198>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b5d      	ldr	r3, [pc, #372]	@ (800160c <MX_GPIO_Init+0x198>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b5a      	ldr	r3, [pc, #360]	@ (800160c <MX_GPIO_Init+0x198>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a59      	ldr	r2, [pc, #356]	@ (800160c <MX_GPIO_Init+0x198>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <MX_GPIO_Init+0x198>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4b54      	ldr	r3, [pc, #336]	@ (800160c <MX_GPIO_Init+0x198>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a53      	ldr	r2, [pc, #332]	@ (800160c <MX_GPIO_Init+0x198>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b51      	ldr	r3, [pc, #324]	@ (800160c <MX_GPIO_Init+0x198>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b4e      	ldr	r3, [pc, #312]	@ (800160c <MX_GPIO_Init+0x198>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a4d      	ldr	r2, [pc, #308]	@ (800160c <MX_GPIO_Init+0x198>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b4b      	ldr	r3, [pc, #300]	@ (800160c <MX_GPIO_Init+0x198>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b48      	ldr	r3, [pc, #288]	@ (800160c <MX_GPIO_Init+0x198>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a47      	ldr	r2, [pc, #284]	@ (800160c <MX_GPIO_Init+0x198>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b45      	ldr	r3, [pc, #276]	@ (800160c <MX_GPIO_Init+0x198>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	4b42      	ldr	r3, [pc, #264]	@ (800160c <MX_GPIO_Init+0x198>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a41      	ldr	r2, [pc, #260]	@ (800160c <MX_GPIO_Init+0x198>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b3f      	ldr	r3, [pc, #252]	@ (800160c <MX_GPIO_Init+0x198>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2168      	movs	r1, #104	@ 0x68
 800151e:	483c      	ldr	r0, [pc, #240]	@ (8001610 <MX_GPIO_Init+0x19c>)
 8001520:	f002 f8ee 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800152a:	483a      	ldr	r0, [pc, #232]	@ (8001614 <MX_GPIO_Init+0x1a0>)
 800152c:	f002 f8e8 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Power_GPIO_Port, USB_Power_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	@ 0x40
 8001534:	4838      	ldr	r0, [pc, #224]	@ (8001618 <MX_GPIO_Init+0x1a4>)
 8001536:	f002 f8e3 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001540:	4836      	ldr	r0, [pc, #216]	@ (800161c <MX_GPIO_Init+0x1a8>)
 8001542:	f002 f8dd 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001546:	2314      	movs	r3, #20
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	482d      	ldr	r0, [pc, #180]	@ (8001610 <MX_GPIO_Init+0x19c>)
 800155a:	f001 ff0d 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800155e:	2368      	movs	r3, #104	@ 0x68
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4826      	ldr	r0, [pc, #152]	@ (8001610 <MX_GPIO_Init+0x19c>)
 8001576:	f001 feff 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Blue_B_Pin */
  GPIO_InitStruct.Pin = USER_Blue_B_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Blue_B_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4823      	ldr	r0, [pc, #140]	@ (800161c <MX_GPIO_Init+0x1a8>)
 8001590:	f001 fef2 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001594:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4819      	ldr	r0, [pc, #100]	@ (8001614 <MX_GPIO_Init+0x1a0>)
 80015ae:	f001 fee3 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Power_Pin */
  GPIO_InitStruct.Pin = USB_Power_Pin;
 80015b2:	2340      	movs	r3, #64	@ 0x40
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_Power_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4813      	ldr	r0, [pc, #76]	@ (8001618 <MX_GPIO_Init+0x1a4>)
 80015ca:	f001 fed5 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USE_Overc_Pin */
  GPIO_InitStruct.Pin = USE_Overc_Pin;
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USE_Overc_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_GPIO_Init+0x1a4>)
 80015e2:	f001 fec9 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80015e6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	@ (800161c <MX_GPIO_Init+0x1a8>)
 8001600:	f001 feba 	bl	8003378 <HAL_GPIO_Init>

}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	@ 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020400 	.word	0x40020400
 8001618:	40021800 	.word	0x40021800
 800161c:	40020800 	.word	0x40020800

08001620 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <MX_I2C1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_I2C1_Init+0x74>)
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <MX_I2C1_Init+0x7c>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_I2C1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <MX_I2C1_Init+0x74>)
 800165c:	f002 f86a 	bl	8003734 <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001666:	f000 fed5 	bl	8002414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <MX_I2C1_Init+0x74>)
 800166e:	f002 f8fd 	bl	800386c <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001678:	f000 fecc 	bl	8002414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001680:	f002 f93f 	bl	8003902 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fec3 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000017c 	.word	0x2000017c
 8001698:	40005400 	.word	0x40005400
 800169c:	20404768 	.word	0x20404768

080016a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <MX_I2C2_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <MX_I2C2_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016dc:	f002 f82a 	bl	8003734 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fe95 	bl	8002414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ee:	f002 f8bd 	bl	800386c <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fe8c 	bl	8002414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_I2C2_Init+0x74>)
 8001700:	f002 f8ff 	bl	8003902 <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fe83 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200001d0 	.word	0x200001d0
 8001718:	40005800 	.word	0x40005800
 800171c:	20404768 	.word	0x20404768

08001720 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <MX_I2C4_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_I2C4_Init+0x74>)
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <MX_I2C4_Init+0x7c>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001738:	2201      	movs	r2, #1
 800173a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_I2C4_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_I2C4_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800175a:	480e      	ldr	r0, [pc, #56]	@ (8001794 <MX_I2C4_Init+0x74>)
 800175c:	f001 ffea 	bl	8003734 <HAL_I2C_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001766:	f000 fe55 	bl	8002414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <MX_I2C4_Init+0x74>)
 800176e:	f002 f87d 	bl	800386c <HAL_I2CEx_ConfigAnalogFilter>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 fe4c 	bl	8002414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_I2C4_Init+0x74>)
 8001780:	f002 f8bf 	bl	8003902 <HAL_I2CEx_ConfigDigitalFilter>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800178a:	f000 fe43 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000224 	.word	0x20000224
 8001798:	40006000 	.word	0x40006000
 800179c:	20404768 	.word	0x20404768

080017a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0b2      	sub	sp, #200	@ 0xc8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	2290      	movs	r2, #144	@ 0x90
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f8a9 	bl	8005918 <memset>
  if(i2cHandle->Instance==I2C1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a66      	ldr	r2, [pc, #408]	@ (8001964 <HAL_I2C_MspInit+0x1c4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d13e      	bne.n	800184e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fd8b 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80017ec:	f000 fe12 	bl	8002414 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	623b      	str	r3, [r7, #32]
 8001806:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001808:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800182c:	4619      	mov	r1, r3
 800182e:	484f      	ldr	r0, [pc, #316]	@ (800196c <HAL_I2C_MspInit+0x1cc>)
 8001830:	f001 fda2 	bl	8003378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001834:	4b4c      	ldr	r3, [pc, #304]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	4a4b      	ldr	r2, [pc, #300]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 800183a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001840:	4b49      	ldr	r3, [pc, #292]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800184c:	e086      	b.n	800195c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a47      	ldr	r2, [pc, #284]	@ (8001970 <HAL_I2C_MspInit+0x1d0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d13e      	bne.n	80018d6 <HAL_I2C_MspInit+0x136>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fd47 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001874:	f000 fdce 	bl	8002414 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4a3a      	ldr	r2, [pc, #232]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	6313      	str	r3, [r2, #48]	@ 0x30
 8001884:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001890:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001898:	2312      	movs	r3, #18
 800189a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018aa:	2304      	movs	r3, #4
 80018ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80018b4:	4619      	mov	r1, r3
 80018b6:	482d      	ldr	r0, [pc, #180]	@ (800196c <HAL_I2C_MspInit+0x1cc>)
 80018b8:	f001 fd5e 	bl	8003378 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	4a29      	ldr	r2, [pc, #164]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80018c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
}
 80018d4:	e042      	b.n	800195c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C4)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <HAL_I2C_MspInit+0x1d4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13d      	bne.n	800195c <HAL_I2C_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80018e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fd03 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_MspInit+0x160>
      Error_Handler();
 80018fc:	f000 fd8a 	bl	8002414 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6313      	str	r3, [r2, #48]	@ 0x30
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001918:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800193c:	4619      	mov	r1, r3
 800193e:	480e      	ldr	r0, [pc, #56]	@ (8001978 <HAL_I2C_MspInit+0x1d8>)
 8001940:	f001 fd1a 	bl	8003378 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_I2C_MspInit+0x1c8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	bf00      	nop
 800195e:	37c8      	adds	r7, #200	@ 0xc8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400
 8001970:	40005800 	.word	0x40005800
 8001974:	40006000 	.word	0x40006000
 8001978:	40020c00 	.word	0x40020c00

0800197c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <SCB_EnableICache+0x48>)
 800198e:	2200      	movs	r2, #0
 8001990:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001994:	f3bf 8f4f 	dsb	sy
}
 8001998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800199a:	f3bf 8f6f 	isb	sy
}
 800199e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <SCB_EnableICache+0x48>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <SCB_EnableICache+0x48>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019b2:	f3bf 8f6f 	isb	sy
}
 80019b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <SCB_EnableDCache+0x84>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80019d6:	f3bf 8f4f 	dsb	sy
}
 80019da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <SCB_EnableDCache+0x84>)
 80019de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	015a      	lsls	r2, r3, #5
 80019fc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001a00:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a06:	4911      	ldr	r1, [pc, #68]	@ (8001a4c <SCB_EnableDCache+0x84>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ef      	bne.n	80019f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e5a      	subs	r2, r3, #1
 8001a1c:	60fa      	str	r2, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e5      	bne.n	80019ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a22:	f3bf 8f4f 	dsb	sy
}
 8001a26:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <SCB_EnableDCache+0x84>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <SCB_EnableDCache+0x84>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a32:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a34:	f3bf 8f4f 	dsb	sy
}
 8001a38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a3a:	f3bf 8f6f 	isb	sy
}
 8001a3e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <SelectHorse>:
    {"Player 1", NULL, 0, 0, 0, 0, 0, 0},
    {"Player 2", NULL, 0, 0, 0, 0, 0, 0},
    {"Player 3", NULL, 0, 0, 0, 0, 0, 0}
};

void SelectHorse(uint8_t playerIndex, uint8_t horseIndex) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71bb      	strb	r3, [r7, #6]
    if(playerIndex < 3 && horseIndex < (sizeof(horses)/sizeof(Horse))) {
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d868      	bhi.n	8001b38 <SelectHorse+0xe8>
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d865      	bhi.n	8001b38 <SelectHorse+0xe8>
        players[playerIndex].horseIndex = horseIndex;           // เก็บ index
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	4935      	ldr	r1, [pc, #212]	@ (8001b44 <SelectHorse+0xf4>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	701a      	strb	r2, [r3, #0]
        players[playerIndex].selectedHorse = &horses[horseIndex]; // ชี้ไปยัง struct ม้าที่เลือก
 8001a80:	79b9      	ldrb	r1, [r7, #6]
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	492e      	ldr	r1, [pc, #184]	@ (8001b48 <SelectHorse+0xf8>)
 8001a8e:	4419      	add	r1, r3
 8001a90:	482c      	ldr	r0, [pc, #176]	@ (8001b44 <SelectHorse+0xf4>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4403      	add	r3, r0
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	6019      	str	r1, [r3, #0]
        players[playerIndex].speed    = horses[horseIndex].speed;
 8001aa0:	79b9      	ldrb	r1, [r7, #6]
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	4828      	ldr	r0, [pc, #160]	@ (8001b48 <SelectHorse+0xf8>)
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4403      	add	r3, r0
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	8818      	ldrh	r0, [r3, #0]
 8001ab4:	4923      	ldr	r1, [pc, #140]	@ (8001b44 <SelectHorse+0xf4>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	330a      	adds	r3, #10
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	801a      	strh	r2, [r3, #0]
        players[playerIndex].stamina  = horses[horseIndex].stamina;
 8001ac6:	79b9      	ldrb	r1, [r7, #6]
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	481f      	ldr	r0, [pc, #124]	@ (8001b48 <SelectHorse+0xf8>)
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4403      	add	r3, r0
 8001ad6:	330e      	adds	r3, #14
 8001ad8:	8818      	ldrh	r0, [r3, #0]
 8001ada:	491a      	ldr	r1, [pc, #104]	@ (8001b44 <SelectHorse+0xf4>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	330c      	adds	r3, #12
 8001ae8:	4602      	mov	r2, r0
 8001aea:	801a      	strh	r2, [r3, #0]
        players[playerIndex].luck     = horses[horseIndex].luck;
 8001aec:	79b9      	ldrb	r1, [r7, #6]
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	4815      	ldr	r0, [pc, #84]	@ (8001b48 <SelectHorse+0xf8>)
 8001af2:	460b      	mov	r3, r1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4403      	add	r3, r0
 8001afc:	3310      	adds	r3, #16
 8001afe:	8818      	ldrh	r0, [r3, #0]
 8001b00:	4910      	ldr	r1, [pc, #64]	@ (8001b44 <SelectHorse+0xf4>)
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	330e      	adds	r3, #14
 8001b0e:	4602      	mov	r2, r0
 8001b10:	801a      	strh	r2, [r3, #0]
        players[playerIndex].strength = horses[horseIndex].strength;
 8001b12:	79b9      	ldrb	r1, [r7, #6]
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <SelectHorse+0xf8>)
 8001b18:	460b      	mov	r3, r1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4403      	add	r3, r0
 8001b22:	3312      	adds	r3, #18
 8001b24:	8818      	ldrh	r0, [r3, #0]
 8001b26:	4907      	ldr	r1, [pc, #28]	@ (8001b44 <SelectHorse+0xf4>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3310      	adds	r3, #16
 8001b34:	4602      	mov	r2, r0
 8001b36:	801a      	strh	r2, [r3, #0]
    }
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	2000007c 	.word	0x2000007c
 8001b48:	20000004 	.word	0x20000004

08001b4c <DrawBitmap16Bit>:
    return NULL;
}

GameState currentState = STATE_TITLE;

void DrawBitmap16Bit(int x, int y, const uint16_t *bitmap, int w, int h) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
    int index = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    for (int j = 0; j < h; j++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e023      	b.n	8001bac <DrawBitmap16Bit+0x60>
        for (int i = 0; i < w; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e019      	b.n	8001b9e <DrawBitmap16Bit+0x52>
            ILI9341_Draw_Pixel(x + i, y + j, bitmap[index]);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	b298      	uxth	r0, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b299      	uxth	r1, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f7ff fa11 	bl	8000fb4 <ILI9341_Draw_Pixel>
            index++;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < w; i++) {
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbe1      	blt.n	8001b6a <DrawBitmap16Bit+0x1e>
    for (int j = 0; j < h; j++) {
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbd7      	blt.n	8001b64 <DrawBitmap16Bit+0x18>
        }
    }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <DrawBitmap16Bit_Transparent>:

#define TRANSPARENT_COLOR 0x0000  // กำหนดสีโปร่งใส

void DrawBitmap16Bit_Transparent(int x, int y, const uint16_t *bitmap, int w, int h) {
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b088      	sub	sp, #32
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
    int index = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    for (int j = 0; j < h; j++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e028      	b.n	8001c28 <DrawBitmap16Bit_Transparent+0x6a>
        for (int i = 0; i < w; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e01e      	b.n	8001c1a <DrawBitmap16Bit_Transparent+0x5c>
            uint16_t pixel = bitmap[index];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	827b      	strh	r3, [r7, #18]
            if(pixel != TRANSPARENT_COLOR) { // ถ้าไม่ใช่สีโปร่งใส
 8001be8:	8a7b      	ldrh	r3, [r7, #18]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00f      	beq.n	8001c0e <DrawBitmap16Bit_Transparent+0x50>
                ILI9341_Draw_Pixel(x + i, y + j, pixel);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b298      	uxth	r0, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	8a7a      	ldrh	r2, [r7, #18]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff f9d3 	bl	8000fb4 <ILI9341_Draw_Pixel>
            }
            index++;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < w; i++) {
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbdc      	blt.n	8001bdc <DrawBitmap16Bit_Transparent+0x1e>
    for (int j = 0; j < h; j++) {
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbd2      	blt.n	8001bd6 <DrawBitmap16Bit_Transparent+0x18>
        }
    }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <selectcharactorsceen>:

void selectcharactorsceen(){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(0xFFFF);
 8001c42:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c46:	f7ff f98f 	bl	8000f68 <ILI9341_Fill_Screen>
	DrawBitmap16Bit(0, 0 , select_bg, 320, 240);
 8001c4a:	23f0      	movs	r3, #240	@ 0xf0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <selectcharactorsceen+0x50>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff ff78 	bl	8001b4c <DrawBitmap16Bit>
	ILI9341_Draw_Text("Select Character", 50, 10, 0x0000, 2, 0xFFFF);
 8001c5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2302      	movs	r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	220a      	movs	r2, #10
 8001c6a:	2132      	movs	r1, #50	@ 0x32
 8001c6c:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <selectcharactorsceen+0x54>)
 8001c6e:	f7fe fe71 	bl	8000954 <ILI9341_Draw_Text>
	DrawCharacter(0);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f80e 	bl	8001c94 <DrawCharacter>
	DrawCharacter(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 f80b 	bl	8001c94 <DrawCharacter>
	DrawCharacter(2);
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f000 f808 	bl	8001c94 <DrawCharacter>
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	08047ef8 	.word	0x08047ef8
 8001c90:	08006280 	.word	0x08006280

08001c94 <DrawCharacter>:

void DrawCharacter(uint8_t index) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    switch(index) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	f200 8087 	bhi.w	8001db4 <DrawCharacter+0x120>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <DrawCharacter+0x18>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001ced 	.word	0x08001ced
 8001cb4:	08001d15 	.word	0x08001d15
 8001cb8:	08001d3d 	.word	0x08001d3d
 8001cbc:	08001d65 	.word	0x08001d65
 8001cc0:	08001d8d 	.word	0x08001d8d
        case 0:
            DrawBitmap16Bit(20, 40, ouguri_cap, 80, 120);
 8001cc4:	2378      	movs	r3, #120	@ 0x78
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2350      	movs	r3, #80	@ 0x50
 8001cca:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <DrawCharacter+0x128>)
 8001ccc:	2128      	movs	r1, #40	@ 0x28
 8001cce:	2014      	movs	r0, #20
 8001cd0:	f7ff ff3c 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Ouguri", 22, 42, 0x0000, 1, 0xFFFF);
 8001cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	222a      	movs	r2, #42	@ 0x2a
 8001ce2:	2116      	movs	r1, #22
 8001ce4:	4836      	ldr	r0, [pc, #216]	@ (8001dc0 <DrawCharacter+0x12c>)
 8001ce6:	f7fe fe35 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001cea:	e063      	b.n	8001db4 <DrawCharacter+0x120>
        case 1:
            DrawBitmap16Bit(120, 40, tokai_teio, 80, 120);
 8001cec:	2378      	movs	r3, #120	@ 0x78
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2350      	movs	r3, #80	@ 0x50
 8001cf2:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <DrawCharacter+0x130>)
 8001cf4:	2128      	movs	r1, #40	@ 0x28
 8001cf6:	2078      	movs	r0, #120	@ 0x78
 8001cf8:	f7ff ff28 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Tokai", 122, 42, 0x0000, 1, 0xFFFF);
 8001cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	222a      	movs	r2, #42	@ 0x2a
 8001d0a:	217a      	movs	r1, #122	@ 0x7a
 8001d0c:	482e      	ldr	r0, [pc, #184]	@ (8001dc8 <DrawCharacter+0x134>)
 8001d0e:	f7fe fe21 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001d12:	e04f      	b.n	8001db4 <DrawCharacter+0x120>
        case 2:
            DrawBitmap16Bit(220, 40, seiun_sky, 80, 120);
 8001d14:	2378      	movs	r3, #120	@ 0x78
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2350      	movs	r3, #80	@ 0x50
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dcc <DrawCharacter+0x138>)
 8001d1c:	2128      	movs	r1, #40	@ 0x28
 8001d1e:	20dc      	movs	r0, #220	@ 0xdc
 8001d20:	f7ff ff14 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Seiun", 222, 42, 0x0000, 1, 0xFFFF);
 8001d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	222a      	movs	r2, #42	@ 0x2a
 8001d32:	21de      	movs	r1, #222	@ 0xde
 8001d34:	4826      	ldr	r0, [pc, #152]	@ (8001dd0 <DrawCharacter+0x13c>)
 8001d36:	f7fe fe0d 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001d3a:	e03b      	b.n	8001db4 <DrawCharacter+0x120>
        case 3:
            DrawBitmap16Bit(20, 40, kita_sun, 80, 120);
 8001d3c:	2378      	movs	r3, #120	@ 0x78
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2350      	movs	r3, #80	@ 0x50
 8001d42:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <DrawCharacter+0x140>)
 8001d44:	2128      	movs	r1, #40	@ 0x28
 8001d46:	2014      	movs	r0, #20
 8001d48:	f7ff ff00 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Kita", 22, 42, 0x0000, 1, 0xFFFF);
 8001d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	2301      	movs	r3, #1
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	222a      	movs	r2, #42	@ 0x2a
 8001d5a:	2116      	movs	r1, #22
 8001d5c:	481e      	ldr	r0, [pc, #120]	@ (8001dd8 <DrawCharacter+0x144>)
 8001d5e:	f7fe fdf9 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001d62:	e027      	b.n	8001db4 <DrawCharacter+0x120>
        case 4:
            DrawBitmap16Bit(120, 40, silence_susuka, 80, 120);
 8001d64:	2378      	movs	r3, #120	@ 0x78
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2350      	movs	r3, #80	@ 0x50
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <DrawCharacter+0x148>)
 8001d6c:	2128      	movs	r1, #40	@ 0x28
 8001d6e:	2078      	movs	r0, #120	@ 0x78
 8001d70:	f7ff feec 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Suzuka", 122, 42, 0x0000, 1, 0xFFFF);
 8001d74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	222a      	movs	r2, #42	@ 0x2a
 8001d82:	217a      	movs	r1, #122	@ 0x7a
 8001d84:	4816      	ldr	r0, [pc, #88]	@ (8001de0 <DrawCharacter+0x14c>)
 8001d86:	f7fe fde5 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001d8a:	e013      	b.n	8001db4 <DrawCharacter+0x120>
        case 5:
            DrawBitmap16Bit(220, 40, still_inlove, 80, 120);
 8001d8c:	2378      	movs	r3, #120	@ 0x78
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2350      	movs	r3, #80	@ 0x50
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <DrawCharacter+0x150>)
 8001d94:	2128      	movs	r1, #40	@ 0x28
 8001d96:	20dc      	movs	r0, #220	@ 0xdc
 8001d98:	f7ff fed8 	bl	8001b4c <DrawBitmap16Bit>
            ILI9341_Draw_Text("Love", 222, 42, 0x0000, 1, 0xFFFF);
 8001d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2301      	movs	r3, #1
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	222a      	movs	r2, #42	@ 0x2a
 8001daa:	21de      	movs	r1, #222	@ 0xde
 8001dac:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <DrawCharacter+0x154>)
 8001dae:	f7fe fdd1 	bl	8000954 <ILI9341_Draw_Text>
            break;
 8001db2:	bf00      	nop
    }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	080064f8 	.word	0x080064f8
 8001dc0:	0800622c 	.word	0x0800622c
 8001dc4:	0800aff8 	.word	0x0800aff8
 8001dc8:	08006234 	.word	0x08006234
 8001dcc:	0800faf8 	.word	0x0800faf8
 8001dd0:	0800623c 	.word	0x0800623c
 8001dd4:	080145f8 	.word	0x080145f8
 8001dd8:	08006244 	.word	0x08006244
 8001ddc:	080190f8 	.word	0x080190f8
 8001de0:	0800624c 	.word	0x0800624c
 8001de4:	0801dbf8 	.word	0x0801dbf8
 8001de8:	08006254 	.word	0x08006254

08001dec <UpdateSelectScreen>:

void UpdateSelectScreen(uint8_t adcRange) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
    // วาดพื้นหลัง
    DrawBitmap16Bit(0, 0 , select_bg, 320, 240);
 8001df6:	23f0      	movs	r3, #240	@ 0xf0
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <UpdateSelectScreen+0x70>)
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fea2 	bl	8001b4c <DrawBitmap16Bit>

    // วาดตัวละคร        		// ADC >= 3 → redraw ตัวละครด้านบนด้วยภาพใหม่
    if(adcRange >= 3){
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d909      	bls.n	8001e22 <UpdateSelectScreen+0x36>
        DrawCharacter(3); 	// redraw ตัวแรก
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f7ff ff40 	bl	8001c94 <DrawCharacter>
        DrawCharacter(4); 	// redraw ตัวสอง
 8001e14:	2004      	movs	r0, #4
 8001e16:	f7ff ff3d 	bl	8001c94 <DrawCharacter>
        DrawCharacter(5); 	// redraw ตัวสาม
 8001e1a:	2005      	movs	r0, #5
 8001e1c:	f7ff ff3a 	bl	8001c94 <DrawCharacter>
 8001e20:	e008      	b.n	8001e34 <UpdateSelectScreen+0x48>
    } else {         		// ADC >= 3 → redraw ตัวละครด้านบนด้วยภาพใหม่
        DrawCharacter(0);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff ff36 	bl	8001c94 <DrawCharacter>
        DrawCharacter(1);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff ff33 	bl	8001c94 <DrawCharacter>
        DrawCharacter(2);
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f7ff ff30 	bl	8001c94 <DrawCharacter>
    }

    // วาดกรอบ highlight ==
    highlightCharacter(adcRange);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f982 	bl	8002140 <highlightCharacter>
    ILI9341_Draw_Text("Select Character", 50, 10, 0x0000, 2, 0xFFFF);
 8001e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	220a      	movs	r2, #10
 8001e4a:	2132      	movs	r1, #50	@ 0x32
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <UpdateSelectScreen+0x74>)
 8001e4e:	f7fe fd81 	bl	8000954 <ILI9341_Draw_Text>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08047ef8 	.word	0x08047ef8
 8001e60:	08006280 	.word	0x08006280

08001e64 <training>:

void training(uint8_t playerIndex) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b092      	sub	sp, #72	@ 0x48
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
    // เคลียร์จอ + วาด background
    DrawBitmap16Bit(0, 0 , select_bg, 320, 240);
 8001e6e:	23f0      	movs	r3, #240	@ 0xf0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001e76:	4a30      	ldr	r2, [pc, #192]	@ (8001f38 <training+0xd4>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fe66 	bl	8001b4c <DrawBitmap16Bit>

    // วาด sprite ม้าที่ player เลือก
    if(players[playerIndex].selectedHorse != NULL) {
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	492e      	ldr	r1, [pc, #184]	@ (8001f3c <training+0xd8>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <training+0x54>
        DrawBitmap16Bit_Transparent(80, 80,
            players[playerIndex].selectedHorse->spriteTrain,
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	4928      	ldr	r1, [pc, #160]	@ (8001f3c <training+0xd8>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
        DrawBitmap16Bit_Transparent(80, 80,
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	23a8      	movs	r3, #168	@ 0xa8
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	23a8      	movs	r3, #168	@ 0xa8
 8001eb0:	2150      	movs	r1, #80	@ 0x50
 8001eb2:	2050      	movs	r0, #80	@ 0x50
 8001eb4:	f7ff fe83 	bl	8001bbe <DrawBitmap16Bit_Transparent>
            168, 168);
    }

    // วาดชื่อ Player + ม้าที่เลือก
    char buff[50];
    if(players[playerIndex].selectedHorse != NULL) {
 8001eb8:	79fa      	ldrb	r2, [r7, #7]
 8001eba:	4920      	ldr	r1, [pc, #128]	@ (8001f3c <training+0xd8>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <training+0x90>
        sprintf(buff, "Player %d: %s", playerIndex + 1,
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	1c59      	adds	r1, r3, #1
                players[playerIndex].selectedHorse->name);
 8001ed2:	79fa      	ldrb	r2, [r7, #7]
 8001ed4:	4819      	ldr	r0, [pc, #100]	@ (8001f3c <training+0xd8>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4403      	add	r3, r0
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
        sprintf(buff, "Player %d: %s", playerIndex + 1,
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f107 000c 	add.w	r0, r7, #12
 8001eea:	460a      	mov	r2, r1
 8001eec:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <training+0xdc>)
 8001eee:	f003 fcf1 	bl	80058d4 <siprintf>
 8001ef2:	e007      	b.n	8001f04 <training+0xa0>
    } else {
        sprintf(buff, "Player %d: No Horse", playerIndex + 1);
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4911      	ldr	r1, [pc, #68]	@ (8001f44 <training+0xe0>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fce8 	bl	80058d4 <siprintf>
    }
    ILI9341_Draw_Text(buff, 15, 15, 0x0000, 2, 0xFFFF);
 8001f04:	f107 000c 	add.w	r0, r7, #12
 8001f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	220f      	movs	r2, #15
 8001f16:	210f      	movs	r1, #15
 8001f18:	f7fe fd1c 	bl	8000954 <ILI9341_Draw_Text>

    // วาด energy bar หรือค่าพลัง
    energybar();
 8001f1c:	f000 f83c 	bl	8001f98 <energybar>

    // ไอคอนเล็ก ๆ ประกอบ
    ILI9341_Draw_Filled_Circle(45, 125, 25, 0x07E0);
 8001f20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f24:	2219      	movs	r2, #25
 8001f26:	217d      	movs	r1, #125	@ 0x7d
 8001f28:	202d      	movs	r0, #45	@ 0x2d
 8001f2a:	f7fe fb6f 	bl	800060c <ILI9341_Draw_Filled_Circle>
}
 8001f2e:	bf00      	nop
 8001f30:	3740      	adds	r7, #64	@ 0x40
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08047ef8 	.word	0x08047ef8
 8001f3c:	2000007c 	.word	0x2000007c
 8001f40:	08006294 	.word	0x08006294
 8001f44:	080062a4 	.word	0x080062a4

08001f48 <Color565>:


uint16_t Color565(uint8_t r, uint8_t g, uint8_t b){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	460b      	mov	r3, r1
 8001f54:	71bb      	strb	r3, [r7, #6]
 8001f56:	4613      	mov	r3, r2
 8001f58:	717b      	strb	r3, [r7, #5]
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <Color565+0x4c>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	797b      	ldrb	r3, [r7, #5]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b29b      	uxth	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	fffff800 	.word	0xfffff800

08001f98 <energybar>:
void energybar(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Rectangle(90,10, 160, 15, Color565(0,200,0));
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	21c8      	movs	r1, #200	@ 0xc8
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ffd0 	bl	8001f48 <Color565>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	230f      	movs	r3, #15
 8001fae:	22a0      	movs	r2, #160	@ 0xa0
 8001fb0:	210a      	movs	r1, #10
 8001fb2:	205a      	movs	r0, #90	@ 0x5a
 8001fb4:	f7ff f8d8 	bl	8001168 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(90,10, 80, 15, Color565(0,255,0));
 8001fb8:	2200      	movs	r2, #0
 8001fba:	21ff      	movs	r1, #255	@ 0xff
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff ffc3 	bl	8001f48 <Color565>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	2250      	movs	r2, #80	@ 0x50
 8001fca:	210a      	movs	r1, #10
 8001fcc:	205a      	movs	r0, #90	@ 0x5a
 8001fce:	f7ff f8cb 	bl	8001168 <ILI9341_Draw_Rectangle>
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <Read_ADC_Range>:
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}

void Read_ADC_Range(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001fdc:	4823      	ldr	r0, [pc, #140]	@ (800206c <Read_ADC_Range+0x94>)
 8001fde:	f000 fcf7 	bl	80029d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe6:	4821      	ldr	r0, [pc, #132]	@ (800206c <Read_ADC_Range+0x94>)
 8001fe8:	f000 fdf4 	bl	8002bd4 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(&hadc1);
 8001fec:	481f      	ldr	r0, [pc, #124]	@ (800206c <Read_ADC_Range+0x94>)
 8001fee:	f000 fe7c 	bl	8002cea <HAL_ADC_GetValue>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <Read_ADC_Range+0x98>)
 8001ff6:	6013      	str	r3, [r2, #0]
    HAL_ADC_Stop(&hadc1);
 8001ff8:	481c      	ldr	r0, [pc, #112]	@ (800206c <Read_ADC_Range+0x94>)
 8001ffa:	f000 fdb7 	bl	8002b6c <HAL_ADC_Stop>

    // สมมติ ADC 12-bit → 0 - 4095
    // แบ่งเป็น 6 ช่วงเท่า ๆ กัน
    if(adcValue <= 682)          // 0 - 682
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <Read_ADC_Range+0x98>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f240 22aa 	movw	r2, #682	@ 0x2aa
 8002006:	4293      	cmp	r3, r2
 8002008:	d803      	bhi.n	8002012 <Read_ADC_Range+0x3a>
        adcRange = 0;            // ตัวละคร 1
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <Read_ADC_Range+0x9c>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
        adcRange = 3;            // ตัวละคร 4
    else if(adcValue <= 3412)    // 2731 - 3412
        adcRange = 4;            // ตัวละคร 5
    else                          // 3413 - 4095
        adcRange = 5;            // ตัวละคร 6
}
 8002010:	e029      	b.n	8002066 <Read_ADC_Range+0x8e>
    else if(adcValue <= 1365)    // 683 - 1365
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <Read_ADC_Range+0x98>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f240 5255 	movw	r2, #1365	@ 0x555
 800201a:	4293      	cmp	r3, r2
 800201c:	d803      	bhi.n	8002026 <Read_ADC_Range+0x4e>
        adcRange = 1;            // ตัวละคร 2
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <Read_ADC_Range+0x9c>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
}
 8002024:	e01f      	b.n	8002066 <Read_ADC_Range+0x8e>
    else if(adcValue <= 2047)    // 1366 - 2047
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <Read_ADC_Range+0x98>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800202e:	d203      	bcs.n	8002038 <Read_ADC_Range+0x60>
        adcRange = 2;            // ตัวละคร 3
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <Read_ADC_Range+0x9c>)
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
}
 8002036:	e016      	b.n	8002066 <Read_ADC_Range+0x8e>
    else if(adcValue <= 2730)    // 2048 - 2730
 8002038:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <Read_ADC_Range+0x98>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 8002040:	4293      	cmp	r3, r2
 8002042:	d803      	bhi.n	800204c <Read_ADC_Range+0x74>
        adcRange = 3;            // ตัวละคร 4
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <Read_ADC_Range+0x9c>)
 8002046:	2203      	movs	r2, #3
 8002048:	701a      	strb	r2, [r3, #0]
}
 800204a:	e00c      	b.n	8002066 <Read_ADC_Range+0x8e>
    else if(adcValue <= 3412)    // 2731 - 3412
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <Read_ADC_Range+0x98>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f640 5254 	movw	r2, #3412	@ 0xd54
 8002054:	4293      	cmp	r3, r2
 8002056:	d803      	bhi.n	8002060 <Read_ADC_Range+0x88>
        adcRange = 4;            // ตัวละคร 5
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <Read_ADC_Range+0x9c>)
 800205a:	2204      	movs	r2, #4
 800205c:	701a      	strb	r2, [r3, #0]
}
 800205e:	e002      	b.n	8002066 <Read_ADC_Range+0x8e>
        adcRange = 5;            // ตัวละคร 6
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <Read_ADC_Range+0x9c>)
 8002062:	2205      	movs	r2, #5
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000134 	.word	0x20000134
 8002070:	2000027c 	.word	0x2000027c
 8002074:	20000280 	.word	0x20000280

08002078 <getCoord>:
// ฟังก์ชันวาดกรอบครอบตัวละครตาม adcRange
void getCoord(uint8_t range, uint16_t *x0, uint16_t *y0, uint16_t *x1, uint16_t *y1) {
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
    switch(range) {
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b05      	cmp	r3, #5
 800208c:	bf8c      	ite	hi
 800208e:	2201      	movhi	r2, #1
 8002090:	2200      	movls	r2, #0
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	2a00      	cmp	r2, #0
 8002096:	d132      	bne.n	80020fe <getCoord+0x86>
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	f003 0224 	and.w	r2, r3, #36	@ 0x24
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2201      	movne	r2, #1
 80020a8:	2200      	moveq	r2, #0
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d11f      	bne.n	80020f0 <getCoord+0x78>
 80020b0:	f003 0212 	and.w	r2, r3, #18
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2201      	movne	r2, #1
 80020ba:	2200      	moveq	r2, #0
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d10f      	bne.n	80020e2 <getCoord+0x6a>
 80020c2:	f003 0309 	and.w	r3, r3, #9
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d014      	beq.n	80020fe <getCoord+0x86>
        case 0: case 3:
            *x0 = 20;  *y0 = 40;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2214      	movs	r2, #20
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2228      	movs	r2, #40	@ 0x28
 80020de:	801a      	strh	r2, [r3, #0]
            break;
 80020e0:	e01d      	b.n	800211e <getCoord+0xa6>
        case 1: case 4:
            *x0 = 120; *y0 = 40;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2278      	movs	r2, #120	@ 0x78
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2228      	movs	r2, #40	@ 0x28
 80020ec:	801a      	strh	r2, [r3, #0]
            break;
 80020ee:	e016      	b.n	800211e <getCoord+0xa6>
        case 2: case 5:
            *x0 = 220; *y0 = 40;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	22dc      	movs	r2, #220	@ 0xdc
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2228      	movs	r2, #40	@ 0x28
 80020fa:	801a      	strh	r2, [r3, #0]
            break;
 80020fc:	e00f      	b.n	800211e <getCoord+0xa6>
        default:
            *x0 = *y0 = *x1 = *y1 = 0;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	801a      	strh	r2, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	801a      	strh	r2, [r3, #0]
            return;
 800211c:	e00b      	b.n	8002136 <getCoord+0xbe>
    }
    *x1 = *x0 + 80;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	3350      	adds	r3, #80	@ 0x50
 8002124:	b29a      	uxth	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	801a      	strh	r2, [r3, #0]
    *y1 = *y0 + 120;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3378      	adds	r3, #120	@ 0x78
 8002130:	b29a      	uxth	r2, r3
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	801a      	strh	r2, [r3, #0]
}
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <highlightCharacter>:
uint8_t prevAdcRange = 255;
void highlightCharacter(uint8_t range) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af02      	add	r7, sp, #8
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
    uint16_t x0, y0, x1, y1;
    uint16_t px0, py0, px1, py1;

    // ลบกรอบเก่า (ถ้ามีและไม่เท่ากับอันใหม่)
    if (prevAdcRange != 255 && prevAdcRange != range) {
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <highlightCharacter+0x84>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2bff      	cmp	r3, #255	@ 0xff
 8002150:	d01b      	beq.n	800218a <highlightCharacter+0x4a>
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <highlightCharacter+0x84>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	429a      	cmp	r2, r3
 800215a:	d016      	beq.n	800218a <highlightCharacter+0x4a>
        getCoord(prevAdcRange, &px0, &py0, &px1, &py1);
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <highlightCharacter+0x84>)
 800215e:	7818      	ldrb	r0, [r3, #0]
 8002160:	f107 040a 	add.w	r4, r7, #10
 8002164:	f107 020c 	add.w	r2, r7, #12
 8002168:	f107 010e 	add.w	r1, r7, #14
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	4623      	mov	r3, r4
 8002174:	f7ff ff80 	bl	8002078 <getCoord>
        ILI9341_Draw_Hollow_Rectangle_Coord(px0, py0, px1, py1, 0xFFFF); // วาดขาวทับ
 8002178:	89f8      	ldrh	r0, [r7, #14]
 800217a:	89b9      	ldrh	r1, [r7, #12]
 800217c:	897a      	ldrh	r2, [r7, #10]
 800217e:	893b      	ldrh	r3, [r7, #8]
 8002180:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002184:	9400      	str	r4, [sp, #0]
 8002186:	f7fe fac9 	bl	800071c <ILI9341_Draw_Hollow_Rectangle_Coord>
    }

    // วาดกรอบใหม่
    getCoord(range, &x0, &y0, &x1, &y1);
 800218a:	f107 0412 	add.w	r4, r7, #18
 800218e:	f107 0214 	add.w	r2, r7, #20
 8002192:	f107 0116 	add.w	r1, r7, #22
 8002196:	79f8      	ldrb	r0, [r7, #7]
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4623      	mov	r3, r4
 80021a0:	f7ff ff6a 	bl	8002078 <getCoord>
    ILI9341_Draw_Hollow_Rectangle_Coord(x0, y0, x1, y1, 0xF800); // วาดแดง
 80021a4:	8af8      	ldrh	r0, [r7, #22]
 80021a6:	8ab9      	ldrh	r1, [r7, #20]
 80021a8:	8a7a      	ldrh	r2, [r7, #18]
 80021aa:	8a3b      	ldrh	r3, [r7, #16]
 80021ac:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80021b0:	9400      	str	r4, [sp, #0]
 80021b2:	f7fe fab3 	bl	800071c <ILI9341_Draw_Hollow_Rectangle_Coord>

    // อัพเดท prev
    prevAdcRange = range;
 80021b6:	4a03      	ldr	r2, [pc, #12]	@ (80021c4 <highlightCharacter+0x84>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	7013      	strb	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	200000b8 	.word	0x200000b8

080021c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80021ce:	f7ff fbd5 	bl	800197c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80021d2:	f7ff fbf9 	bl	80019c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d6:	f000 fb27 	bl	8002828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 f8ad 	bl	8002338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021de:	f7ff f949 	bl	8001474 <MX_GPIO_Init>
  MX_SPI5_Init();
 80021e2:	f000 f965 	bl	80024b0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80021e6:	f000 fa81 	bl	80026ec <MX_TIM1_Init>
  MX_RNG_Init();
 80021ea:	f000 f919 	bl	8002420 <MX_RNG_Init>
  MX_ADC1_Init();
 80021ee:	f7ff f8af 	bl	8001350 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021f2:	f7ff fa15 	bl	8001620 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021f6:	f7ff fa53 	bl	80016a0 <MX_I2C2_Init>
  MX_I2C4_Init();
 80021fa:	f7ff fa91 	bl	8001720 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 80021fe:	f7fe fd07 	bl	8000c10 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002202:	2001      	movs	r0, #1
 8002204:	f7fe fca6 	bl	8000b54 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(0xFFFF);
 8002208:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800220c:	f7fe feac 	bl	8000f68 <ILI9341_Fill_Screen>
  DrawBitmap16Bit(0, 0 , title_screen, 320, 240);
 8002210:	23f0      	movs	r3, #240	@ 0xf0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002218:	4a44      	ldr	r2, [pc, #272]	@ (800232c <main+0x164>)
 800221a:	2100      	movs	r1, #0
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fc95 	bl	8001b4c <DrawBitmap16Bit>
  uint8_t prevAdcRange = 255;
 8002222:	23ff      	movs	r3, #255	@ 0xff
 8002224:	713b      	strb	r3, [r7, #4]
  bool isHighGroup = false;
 8002226:	2300      	movs	r3, #0
 8002228:	71fb      	strb	r3, [r7, #7]
  uint8_t currentPlayerIndex = 0;   // 0 = Player1, 1 = Player2, 2 = Player3
 800222a:	2300      	movs	r3, #0
 800222c:	71bb      	strb	r3, [r7, #6]
  bool selectionDone[3] = {false, false, false}; // เช็คว่าผู้เล่นแต่ละคนเลือกแล้ว
 800222e:	2300      	movs	r3, #0
 8002230:	703b      	strb	r3, [r7, #0]
 8002232:	2300      	movs	r3, #0
 8002234:	707b      	strb	r3, [r7, #1]
 8002236:	2300      	movs	r3, #0
 8002238:	70bb      	strb	r3, [r7, #2]
  bool trainingDrawn = false;
 800223a:	2300      	movs	r3, #0
 800223c:	717b      	strb	r3, [r7, #5]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Read_ADC_Range();
 800223e:	f7ff fecb 	bl	8001fd8 <Read_ADC_Range>

	  switch (currentState) {
 8002242:	4b3b      	ldr	r3, [pc, #236]	@ (8002330 <main+0x168>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d04c      	beq.n	80022e4 <main+0x11c>
 800224a:	2b02      	cmp	r3, #2
 800224c:	dcf7      	bgt.n	800223e <main+0x76>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <main+0x90>
 8002252:	2b01      	cmp	r3, #1
 8002254:	d00b      	beq.n	800226e <main+0xa6>
 8002256:	e068      	b.n	800232a <main+0x162>
	  	  case STATE_TITLE:
	  		  if (TP_Touchpad_Pressed()) {
 8002258:	f7ff f86a 	bl	8001330 <TP_Touchpad_Pressed>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d05e      	beq.n	8002320 <main+0x158>
	  			  currentState = STATE_SELECTCHAR;
 8002262:	4b33      	ldr	r3, [pc, #204]	@ (8002330 <main+0x168>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
	  			  selectcharactorsceen();
 8002268:	f7ff fce8 	bl	8001c3c <selectcharactorsceen>
	  		  }
	  		  break;
 800226c:	e058      	b.n	8002320 <main+0x158>
	  	  case STATE_SELECTCHAR:
	  	            // วาดกรอบ highlight ตาม ADC
	  	            highlightCharacter(adcRange);
 800226e:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <main+0x16c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff64 	bl	8002140 <highlightCharacter>

	  	            // อัปเดตตัวละครบนหน้าจอถ้าเปลี่ยนกลุ่ม
	  	            bool currentGroup = (adcRange >= 3);
 8002278:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <main+0x16c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	bf8c      	ite	hi
 8002280:	2301      	movhi	r3, #1
 8002282:	2300      	movls	r3, #0
 8002284:	70fb      	strb	r3, [r7, #3]
	  	            if(currentGroup != isHighGroup) {
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d006      	beq.n	800229c <main+0xd4>
	  	                isHighGroup = currentGroup;
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	71fb      	strb	r3, [r7, #7]
	  	                UpdateSelectScreen(adcRange);
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <main+0x16c>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fda8 	bl	8001dec <UpdateSelectScreen>
	  	            }

	  	            // ถ้าผู้เล่นกดเลือกม้า
	  	            if (TP_Touchpad_Pressed()) {
 800229c:	f7ff f848 	bl	8001330 <TP_Touchpad_Pressed>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03e      	beq.n	8002324 <main+0x15c>
	  	                // ให้ผู้เล่นปัจจุบันเลือกม้า
	  	                SelectHorse(currentPlayerIndex, adcRange);
 80022a6:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <main+0x16c>)
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fbce 	bl	8001a50 <SelectHorse>
	  	                selectionDone[currentPlayerIndex] = true;
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	3308      	adds	r3, #8
 80022b8:	443b      	add	r3, r7
 80022ba:	2201      	movs	r2, #1
 80022bc:	f803 2c08 	strb.w	r2, [r3, #-8]

	  	                // ไปผู้เล่นคนถัดไป
	  	                currentPlayerIndex++;
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	3301      	adds	r3, #1
 80022c4:	71bb      	strb	r3, [r7, #6]
	  	                if (currentPlayerIndex >= 3) {
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d905      	bls.n	80022d8 <main+0x110>
	  	                    // ทุกคนเลือกครบแล้ว → ไปเล่นเกม
	  	                	 currentPlayerIndex = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	71bb      	strb	r3, [r7, #6]
	  	                    currentState = STATE_PLAY;
 80022d0:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <main+0x168>)
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
	  	                } else {
	  	                    // วาดหน้าจอเลือกสำหรับผู้เล่นคนต่อไป
	  	                    UpdateSelectScreen(adcRange);
	  	                }
	  	            }
	  	            break;
 80022d6:	e025      	b.n	8002324 <main+0x15c>
	  	                    UpdateSelectScreen(adcRange);
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <main+0x16c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fd85 	bl	8001dec <UpdateSelectScreen>
	  	            break;
 80022e2:	e01f      	b.n	8002324 <main+0x15c>
	  	  case STATE_PLAY:
	  		if (!trainingDrawn) {
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <main+0x134>
	  		            training(currentPlayerIndex);    // วาดแค่ครั้งเดียว
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fdb6 	bl	8001e64 <training>
	  		            trainingDrawn = true;
 80022f8:	2301      	movs	r3, #1
 80022fa:	717b      	strb	r3, [r7, #5]
	  		        }

	  		        // รอการกดจอเพื่อไป Player ต่อไป
	  		        if (TP_Touchpad_Pressed()) {
 80022fc:	f7ff f818 	bl	8001330 <TP_Touchpad_Pressed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <main+0x160>
	  		            currentPlayerIndex++;
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	3301      	adds	r3, #1
 800230a:	71bb      	strb	r3, [r7, #6]
	  		            if (currentPlayerIndex >= 3) {
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d903      	bls.n	800231a <main+0x152>
	  		                currentState = STATE_TITLE;   // จบ training กลับเมนู
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <main+0x168>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
	  		            } else {
	  		                trainingDrawn = false;        // วาด Player ถัดไป
	  		            }
	  		        }
	  		        break;
 8002318:	e006      	b.n	8002328 <main+0x160>
	  		                trainingDrawn = false;        // วาด Player ถัดไป
 800231a:	2300      	movs	r3, #0
 800231c:	717b      	strb	r3, [r7, #5]
	  		        break;
 800231e:	e003      	b.n	8002328 <main+0x160>
	  		  break;
 8002320:	bf00      	nop
 8002322:	e78c      	b.n	800223e <main+0x76>
	  	            break;
 8002324:	bf00      	nop
 8002326:	e78a      	b.n	800223e <main+0x76>
	  		        break;
 8002328:	bf00      	nop
	  Read_ADC_Range();
 800232a:	e788      	b.n	800223e <main+0x76>
 800232c:	080226f8 	.word	0x080226f8
 8002330:	20000278 	.word	0x20000278
 8002334:	20000280 	.word	0x20000280

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	@ 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	2234      	movs	r2, #52	@ 0x34
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fae6 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <SystemClock_Config+0xd4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <SystemClock_Config+0xd4>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002366:	6413      	str	r3, [r2, #64]	@ 0x40
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <SystemClock_Config+0xd4>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002374:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <SystemClock_Config+0xd8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a25      	ldr	r2, [pc, #148]	@ (8002410 <SystemClock_Config+0xd8>)
 800237a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <SystemClock_Config+0xd8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800238c:	2302      	movs	r3, #2
 800238e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002390:	2301      	movs	r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002394:	2310      	movs	r3, #16
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002398:	2302      	movs	r3, #2
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800239c:	2300      	movs	r3, #0
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023a0:	2308      	movs	r3, #8
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80023a4:	23d8      	movs	r3, #216	@ 0xd8
 80023a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80023ac:	2309      	movs	r3, #9
 80023ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4618      	mov	r0, r3
 80023ba:	f001 fb3f 	bl	8003a3c <HAL_RCC_OscConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80023c4:	f000 f826 	bl	8002414 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023c8:	f001 fae8 	bl	800399c <HAL_PWREx_EnableOverDrive>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023d2:	f000 f81f 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d6:	230f      	movs	r3, #15
 80023d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023da:	2302      	movs	r3, #2
 80023dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	2107      	movs	r1, #7
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fdcf 	bl	8003f98 <HAL_RCC_ClockConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002400:	f000 f808 	bl	8002414 <Error_Handler>
  }
}
 8002404:	bf00      	nop
 8002406:	3750      	adds	r7, #80	@ 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <Error_Handler+0x8>

08002420 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <MX_RNG_Init+0x20>)
 8002426:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <MX_RNG_Init+0x24>)
 8002428:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_RNG_Init+0x20>)
 800242c:	f002 fb8e 	bl	8004b4c <HAL_RNG_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002436:	f7ff ffed 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000284 	.word	0x20000284
 8002444:	50060800 	.word	0x50060800

08002448 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0a8      	sub	sp, #160	@ 0xa0
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	2290      	movs	r2, #144	@ 0x90
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fa5d 	bl	8005918 <memset>
  if(rngHandle->Instance==RNG)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_RNG_MspInit+0x60>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d11b      	bne.n	80024a0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002468:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800246c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4618      	mov	r0, r3
 800247a:	f001 ff3f 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002484:	f7ff ffc6 	bl	8002414 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_RNG_MspInit+0x64>)
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <HAL_RNG_MspInit+0x64>)
 800248e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002492:	6353      	str	r3, [r2, #52]	@ 0x34
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_RNG_MspInit+0x64>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80024a0:	bf00      	nop
 80024a2:	37a0      	adds	r7, #160	@ 0xa0
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	50060800 	.word	0x50060800
 80024ac:	40023800 	.word	0x40023800

080024b0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <MX_SPI5_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024ce:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <MX_SPI5_Init+0x74>)
 80024fe:	2207      	movs	r2, #7
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <MX_SPI5_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <MX_SPI5_Init+0x74>)
 800250a:	2208      	movs	r2, #8
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	@ (8002524 <MX_SPI5_Init+0x74>)
 8002510:	f002 fb46 	bl	8004ba0 <HAL_SPI_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800251a:	f7ff ff7b 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000294 	.word	0x20000294
 8002528:	40015000 	.word	0x40015000

0800252c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_SPI_MspInit+0x7c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d128      	bne.n	80025a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002554:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800257e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002590:	2305      	movs	r3, #5
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_SPI_MspInit+0x84>)
 800259c:	f000 feec 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	@ 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40015000 	.word	0x40015000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40021400 	.word	0x40021400

080025b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <HAL_MspInit+0x44>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	4a0e      	ldr	r2, [pc, #56]	@ (80025f8 <HAL_MspInit+0x44>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <HAL_MspInit+0x44>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_MspInit+0x44>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_MspInit+0x44>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_MspInit+0x44>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <NMI_Handler+0x4>

08002604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <UsageFault_Handler+0x4>

08002624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f000 f935 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <_sbrk+0x5c>)
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <_sbrk+0x60>)
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <_sbrk+0x64>)
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <_sbrk+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	429a      	cmp	r2, r3
 800268a:	d207      	bcs.n	800269c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800268c:	f003 f94c 	bl	8005928 <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	220c      	movs	r2, #12
 8002694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e009      	b.n	80026b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800269c:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <_sbrk+0x64>)
 80026ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20080000 	.word	0x20080000
 80026bc:	00000400 	.word	0x00000400
 80026c0:	200002f8 	.word	0x200002f8
 80026c4:	20000498 	.word	0x20000498

080026c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <SystemInit+0x20>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <SystemInit+0x20>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <MX_TIM1_Init+0xa0>)
 800270c:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <MX_TIM1_Init+0xa4>)
 800270e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8002710:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002712:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <MX_TIM1_Init+0xa0>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800272a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <MX_TIM1_Init+0xa0>)
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002738:	4814      	ldr	r0, [pc, #80]	@ (800278c <MX_TIM1_Init+0xa0>)
 800273a:	f002 fddb 	bl	80052f4 <HAL_TIM_Base_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002744:	f7ff fe66 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	480d      	ldr	r0, [pc, #52]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002756:	f002 fe25 	bl	80053a4 <HAL_TIM_ConfigClockSource>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002760:	f7ff fe58 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	@ (800278c <MX_TIM1_Init+0xa0>)
 8002776:	f003 f81f 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002780:	f7ff fe48 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200002fc 	.word	0x200002fc
 8002790:	40010000 	.word	0x40010000

08002794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <HAL_TIM_Base_MspInit+0x38>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10b      	bne.n	80027be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	4a09      	ldr	r2, [pc, #36]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b2:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40023800 	.word	0x40023800

080027d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800280c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d8:	f7ff ff76 	bl	80026c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027de:	490d      	ldr	r1, [pc, #52]	@ (8002814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002802:	f003 f897 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002806:	f7ff fcdf 	bl	80021c8 <main>
  bx  lr    
 800280a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800280c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002818:	080c024c 	.word	0x080c024c
  ldr r2, =_sbss
 800281c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002820:	20000494 	.word	0x20000494

08002824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC_IRQHandler>
	...

08002828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_Init+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <HAL_Init+0x34>)
 8002832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002836:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_Init+0x34>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_Init+0x34>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002844:	2003      	movs	r0, #3
 8002846:	f000 fd63 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284a:	200f      	movs	r0, #15
 800284c:	f000 f808 	bl	8002860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002850:	f7ff feb0 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023c00 	.word	0x40023c00

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_InitTick+0x54>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_InitTick+0x58>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002876:	fbb3 f3f1 	udiv	r3, r3, r1
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fd6d 	bl	800335e <HAL_SYSTICK_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00e      	b.n	80028ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b0f      	cmp	r3, #15
 8002892:	d80a      	bhi.n	80028aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002894:	2200      	movs	r2, #0
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f000 fd43 	bl	8003326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a0:	4a06      	ldr	r2, [pc, #24]	@ (80028bc <HAL_InitTick+0x5c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200000bc 	.word	0x200000bc
 80028b8:	200000c4 	.word	0x200000c4
 80028bc:	200000c0 	.word	0x200000c0

080028c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	200000c4 	.word	0x200000c4
 80028e4:	20000348 	.word	0x20000348

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000348 	.word	0x20000348

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002926:	bf00      	nop
 8002928:	f7ff ffde 	bl	80028e8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200000c4 	.word	0x200000c4

08002948 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e031      	b.n	80029c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fd44 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_ADC_Init+0x84>)
 800298c:	4013      	ands	r3, r2
 800298e:	f043 0202 	orr.w	r2, r3, #2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb0e 	bl	8002fb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80029b2:	e001      	b.n	80029b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	ffffeefd 	.word	0xffffeefd

080029d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_Start+0x1a>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0ad      	b.n	8002b46 <HAL_ADC_Start+0x176>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d018      	beq.n	8002a32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_ADC_Start+0x184>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a50      	ldr	r2, [pc, #320]	@ (8002b58 <HAL_ADC_Start+0x188>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9a      	lsrs	r2, r3, #18
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d175      	bne.n	8002b2c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a44:	4b45      	ldr	r3, [pc, #276]	@ (8002b5c <HAL_ADC_Start+0x18c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7a:	d106      	bne.n	8002a8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	f023 0206 	bic.w	r2, r3, #6
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a88:	e002      	b.n	8002a90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b60 <HAL_ADC_Start+0x190>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d143      	bne.n	8002b44 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e03a      	b.n	8002b44 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a24      	ldr	r2, [pc, #144]	@ (8002b64 <HAL_ADC_Start+0x194>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10e      	bne.n	8002af6 <HAL_ADC_Start+0x126>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002af4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_ADC_Start+0x190>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d120      	bne.n	8002b44 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <HAL_ADC_Start+0x198>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_ADC_Start+0x174>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d114      	bne.n	8002b44 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	e00b      	b.n	8002b44 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200000bc 	.word	0x200000bc
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	fffff8fe 	.word	0xfffff8fe
 8002b60:	40012300 	.word	0x40012300
 8002b64:	40012000 	.word	0x40012000
 8002b68:	40012200 	.word	0x40012200

08002b6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Stop+0x16>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e01f      	b.n	8002bc2 <HAL_ADC_Stop+0x56>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <HAL_ADC_Stop+0x64>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	ffffeefe 	.word	0xffffeefe

08002bd4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf0:	d113      	bne.n	8002c1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c00:	d10b      	bne.n	8002c1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e063      	b.n	8002ce2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c1a:	f7ff fe65 	bl	80028e8 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c20:	e021      	b.n	8002c66 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d01d      	beq.n	8002c66 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_ADC_PollForConversion+0x6c>
 8002c30:	f7ff fe5a 	bl	80028e8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d212      	bcs.n	8002c66 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d00b      	beq.n	8002c66 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e03d      	b.n	8002ce2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d1d6      	bne.n	8002c22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0212 	mvn.w	r2, #18
 8002c7c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d123      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11f      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e13a      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x292>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d93a      	bls.n	8002da6 <HAL_ADC_ConfigChannel+0xa2>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d38:	d035      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	2207      	movs	r2, #7
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a8f      	ldr	r2, [pc, #572]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68d9      	ldr	r1, [r3, #12]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	061a      	lsls	r2, r3, #24
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7e:	e039      	b.n	8002df4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4403      	add	r3, r0
 8002d98:	3b1e      	subs	r3, #30
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da4:	e026      	b.n	8002df4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4403      	add	r3, r0
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	409a      	lsls	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d824      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b05      	subs	r3, #5
 8002e0e:	221f      	movs	r2, #31
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b05      	subs	r3, #5
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e44:	e04c      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d824      	bhi.n	8002e98 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b23      	subs	r3, #35	@ 0x23
 8002e60:	221f      	movs	r2, #31
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b23      	subs	r3, #35	@ 0x23
 8002e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e96:	e023      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b41      	subs	r3, #65	@ 0x41
 8002eaa:	221f      	movs	r2, #31
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b41      	subs	r3, #65	@ 0x41
 8002ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a30      	ldr	r2, [pc, #192]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10a      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1fc>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002efa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002efe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a28      	ldr	r2, [pc, #160]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10f      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x226>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d10b      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f12:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f1c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f1e:	4b23      	ldr	r3, [pc, #140]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f28:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d12b      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x288>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x242>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d122      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f4c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f50:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f52:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f5c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x2b0>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9a      	lsrs	r2, r3, #18
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f7e:	e002      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	10000012 	.word	0x10000012
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	200000bc 	.word	0x200000bc
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc0:	4b78      	ldr	r3, [pc, #480]	@ (80031a4 <ADC_Init+0x1ec>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a77      	ldr	r2, [pc, #476]	@ (80031a4 <ADC_Init+0x1ec>)
 8002fc6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002fca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fcc:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <ADC_Init+0x1ec>)
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4973      	ldr	r1, [pc, #460]	@ (80031a4 <ADC_Init+0x1ec>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	021a      	lsls	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800300c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	4a58      	ldr	r2, [pc, #352]	@ (80031a8 <ADC_Init+0x1f0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800305a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800307c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	e00f      	b.n	80030b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0202 	bic.w	r2, r2, #2
 80030c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	005a      	lsls	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	3b01      	subs	r3, #1
 800310c:	035a      	lsls	r2, r3, #13
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e007      	b.n	8003128 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003126:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	3b01      	subs	r3, #1
 8003144:	051a      	lsls	r2, r3, #20
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800315c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6899      	ldr	r1, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800316a:	025a      	lsls	r2, r3, #9
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	029a      	lsls	r2, r3, #10
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40012300 	.word	0x40012300
 80031a8:	0f000001 	.word	0x0f000001

080031ac <__NVIC_SetPriorityGrouping>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	05fa0000 	.word	0x05fa0000

080031f4 <__NVIC_GetPriorityGrouping>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_SetPriority>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	@ (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	@ 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff8e 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff47 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003338:	f7ff ff5c 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 800333c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff8e 	bl	8003264 <NVIC_EncodePriority>
 8003348:	4602      	mov	r2, r0
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff5d 	bl	8003210 <__NVIC_SetPriority>
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffb0 	bl	80032cc <SysTick_Config>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e175      	b.n	8003684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 8164 	bne.w	800367e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d005      	beq.n	80033ce <HAL_GPIO_Init+0x56>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80be 	beq.w	800367e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_GPIO_Init+0x324>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_GPIO_Init+0x324>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800350c:	6453      	str	r3, [r2, #68]	@ 0x44
 800350e:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_GPIO_Init+0x324>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800351a:	4a61      	ldr	r2, [pc, #388]	@ (80036a0 <HAL_GPIO_Init+0x328>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a58      	ldr	r2, [pc, #352]	@ (80036a4 <HAL_GPIO_Init+0x32c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d037      	beq.n	80035b6 <HAL_GPIO_Init+0x23e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a57      	ldr	r2, [pc, #348]	@ (80036a8 <HAL_GPIO_Init+0x330>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_GPIO_Init+0x23a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a56      	ldr	r2, [pc, #344]	@ (80036ac <HAL_GPIO_Init+0x334>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x236>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a55      	ldr	r2, [pc, #340]	@ (80036b0 <HAL_GPIO_Init+0x338>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x232>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a54      	ldr	r2, [pc, #336]	@ (80036b4 <HAL_GPIO_Init+0x33c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x22e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a53      	ldr	r2, [pc, #332]	@ (80036b8 <HAL_GPIO_Init+0x340>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x22a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	@ (80036bc <HAL_GPIO_Init+0x344>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x226>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a51      	ldr	r2, [pc, #324]	@ (80036c0 <HAL_GPIO_Init+0x348>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x222>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a50      	ldr	r2, [pc, #320]	@ (80036c4 <HAL_GPIO_Init+0x34c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x21e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4f      	ldr	r2, [pc, #316]	@ (80036c8 <HAL_GPIO_Init+0x350>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x21a>
 800358e:	2309      	movs	r3, #9
 8003590:	e012      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 8003592:	230a      	movs	r3, #10
 8003594:	e010      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 8003596:	2308      	movs	r3, #8
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 800359a:	2307      	movs	r3, #7
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	@ (80036a0 <HAL_GPIO_Init+0x328>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3d      	ldr	r3, [pc, #244]	@ (80036cc <HAL_GPIO_Init+0x354>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a34      	ldr	r2, [pc, #208]	@ (80036cc <HAL_GPIO_Init+0x354>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b32      	ldr	r3, [pc, #200]	@ (80036cc <HAL_GPIO_Init+0x354>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a29      	ldr	r2, [pc, #164]	@ (80036cc <HAL_GPIO_Init+0x354>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <HAL_GPIO_Init+0x354>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <HAL_GPIO_Init+0x354>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_GPIO_Init+0x354>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a14      	ldr	r2, [pc, #80]	@ (80036cc <HAL_GPIO_Init+0x354>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae86 	bls.w	8003398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40022400 	.word	0x40022400
 80036cc:	40013c00 	.word	0x40013c00

080036d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	e001      	b.n	80036f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800371c:	e003      	b.n	8003726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08b      	b.n	800385e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f820 	bl	80017a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	e006      	b.n	80037bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d108      	bne.n	80037d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	e007      	b.n	80037e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_I2C_Init+0x134>)
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69d9      	ldr	r1, [r3, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	02008000 	.word	0x02008000

0800386c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	d138      	bne.n	80038f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800388c:	2302      	movs	r3, #2
 800388e:	e032      	b.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	@ 0x24
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d139      	bne.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003922:	2302      	movs	r3, #2
 8003924:	e033      	b.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	@ 0x24
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003954:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a22      	ldr	r2, [pc, #136]	@ (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039be:	4b1e      	ldr	r3, [pc, #120]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ca:	f7fe ff8d 	bl	80028e8 <HAL_GetTick>
 80039ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d0:	e009      	b.n	80039e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d2:	f7fe ff89 	bl	80028e8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039e0:	d901      	bls.n	80039e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e022      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f2:	d1ee      	bne.n	80039d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a00:	f7fe ff72 	bl	80028e8 <HAL_GetTick>
 8003a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a06:	e009      	b.n	8003a1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a08:	f7fe ff6e 	bl	80028e8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a16:	d901      	bls.n	8003a1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e007      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a28:	d1ee      	bne.n	8003a08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e29b      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a60:	4b96      	ldr	r3, [pc, #600]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d00c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6c:	4b93      	ldr	r3, [pc, #588]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d112      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62>
 8003a78:	4b90      	ldr	r3, [pc, #576]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	4b8d      	ldr	r3, [pc, #564]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x130>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d168      	bne.n	8003b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e275      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x7a>
 8003aa8:	4b84      	ldr	r3, [pc, #528]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e02e      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x9c>
 8003abe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b7c      	ldr	r3, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7b      	ldr	r2, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a72      	ldr	r2, [pc, #456]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fee4 	bl	80028e8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe fee0 	bl	80028e8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e229      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b61      	ldr	r3, [pc, #388]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fed0 	bl	80028e8 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fecc 	bl	80028e8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e215      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b57      	ldr	r3, [pc, #348]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x110>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d069      	beq.n	8003c4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b7a:	4b50      	ldr	r3, [pc, #320]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b4d      	ldr	r3, [pc, #308]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x190>
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1e9      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	493d      	ldr	r1, [pc, #244]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e040      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fe82 	bl	80028e8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe fe7e 	bl	80028e8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1c7      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b30      	ldr	r3, [pc, #192]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4929      	ldr	r1, [pc, #164]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a26      	ldr	r2, [pc, #152]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fe5e 	bl	80028e8 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe fe5a 	bl	80028e8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1a3      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d038      	beq.n	8003ccc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d019      	beq.n	8003c96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c66:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fe fe3b 	bl	80028e8 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe fe37 	bl	80028e8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e180      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x23a>
 8003c94:	e01a      	b.n	8003ccc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe fe21 	bl	80028e8 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe fe1d 	bl	80028e8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d903      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e166      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
 8003cbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b92      	ldr	r3, [pc, #584]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a4 	beq.w	8003e22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b8c      	ldr	r3, [pc, #560]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b89      	ldr	r3, [pc, #548]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	4a88      	ldr	r2, [pc, #544]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf2:	4b86      	ldr	r3, [pc, #536]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d02:	4b83      	ldr	r3, [pc, #524]	@ (8003f10 <HAL_RCC_OscConfig+0x4d4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d118      	bne.n	8003d40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d0e:	4b80      	ldr	r3, [pc, #512]	@ (8003f10 <HAL_RCC_OscConfig+0x4d4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7f      	ldr	r2, [pc, #508]	@ (8003f10 <HAL_RCC_OscConfig+0x4d4>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fde5 	bl	80028e8 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe fde1 	bl	80028e8 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b64      	cmp	r3, #100	@ 0x64
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e12a      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d34:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <HAL_RCC_OscConfig+0x4d4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x31a>
 8003d48:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a6f      	ldr	r2, [pc, #444]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	e02d      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x33c>
 8003d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a6a      	ldr	r2, [pc, #424]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6a:	4b68      	ldr	r3, [pc, #416]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	4a67      	ldr	r2, [pc, #412]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d76:	e01c      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x35e>
 8003d80:	4b62      	ldr	r3, [pc, #392]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a61      	ldr	r2, [pc, #388]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d98:	e00b      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	4a58      	ldr	r2, [pc, #352]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fe fd95 	bl	80028e8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fd91 	bl	80028e8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0d8      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ee      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x386>
 8003de4:	e014      	b.n	8003e10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fd7f 	bl	80028e8 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fd7b 	bl	80028e8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0c2      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e04:	4b41      	ldr	r3, [pc, #260]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b3d      	ldr	r3, [pc, #244]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80ae 	beq.w	8003f88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2c:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d06d      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d14b      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b32      	ldr	r3, [pc, #200]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a31      	ldr	r2, [pc, #196]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fd4c 	bl	80028e8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fd48 	bl	80028e8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e091      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	071b      	lsls	r3, r3, #28
 8003e9e:	491b      	ldr	r1, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea4:	4b19      	ldr	r3, [pc, #100]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fd1a 	bl	80028e8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe fd16 	bl	80028e8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e05f      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x47c>
 8003ed6:	e057      	b.n	8003f88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0b      	ldr	r2, [pc, #44]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fd00 	bl	80028e8 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe fcfc 	bl	80028e8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e045      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x4b0>
 8003f0a:	e03d      	b.n	8003f88 <HAL_RCC_OscConfig+0x54c>
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f14:	4b1f      	ldr	r3, [pc, #124]	@ (8003f94 <HAL_RCC_OscConfig+0x558>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d030      	beq.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d129      	bne.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d122      	bne.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d119      	bne.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d10f      	bne.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0d0      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d910      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b67      	ldr	r3, [pc, #412]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020f 	bic.w	r2, r3, #15
 8003fc6:	4965      	ldr	r1, [pc, #404]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d040      	beq.n	80040bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b41      	ldr	r3, [pc, #260]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e073      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06b      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b39      	ldr	r3, [pc, #228]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4936      	ldr	r1, [pc, #216]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fe fc2c 	bl	80028e8 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fe fc28 	bl	80028e8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e053      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040bc:	4b27      	ldr	r3, [pc, #156]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d210      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	4922      	ldr	r1, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x1cc>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x1d0>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1d4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fb88 	bl	8002860 <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	080c01f8 	.word	0x080c01f8
 8004168:	200000bc 	.word	0x200000bc
 800416c:	200000c0 	.word	0x200000c0

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b090      	sub	sp, #64	@ 0x40
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
 800417c:	2300      	movs	r3, #0
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004180:	2300      	movs	r3, #0
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b59      	ldr	r3, [pc, #356]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80a1 	bhi.w	80042dc <HAL_RCC_GetSysClockFreq+0x16c>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e09b      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a8:	e09b      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041ae:	e098      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b4f      	ldr	r3, [pc, #316]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041ba:	4b4d      	ldr	r3, [pc, #308]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b4a      	ldr	r3, [pc, #296]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041d8:	2100      	movs	r1, #0
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041dc:	fb03 f201 	mul.w	r2, r3, r1
 80041e0:	2300      	movs	r3, #0
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	4a43      	ldr	r2, [pc, #268]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ea:	fba0 1202 	umull	r1, r2, r0, r2
 80041ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f0:	460a      	mov	r2, r1
 80041f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f6:	4413      	add	r3, r2
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fc:	2200      	movs	r2, #0
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800420a:	f7fc f869 	bl	80002e0 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4613      	mov	r3, r2
 8004214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004216:	e053      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004218:	4b35      	ldr	r3, [pc, #212]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	2200      	movs	r2, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	617a      	str	r2, [r7, #20]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800422a:	f04f 0b00 	mov.w	fp, #0
 800422e:	4652      	mov	r2, sl
 8004230:	465b      	mov	r3, fp
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	ebb2 080a 	subs.w	r8, r2, sl
 800424a:	eb63 090b 	sbc.w	r9, r3, fp
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800425a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800425e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004262:	ebb2 0408 	subs.w	r4, r2, r8
 8004266:	eb63 0509 	sbc.w	r5, r3, r9
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	00eb      	lsls	r3, r5, #3
 8004274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004278:	00e2      	lsls	r2, r4, #3
 800427a:	4614      	mov	r4, r2
 800427c:	461d      	mov	r5, r3
 800427e:	eb14 030a 	adds.w	r3, r4, sl
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	eb45 030b 	adc.w	r3, r5, fp
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004296:	4629      	mov	r1, r5
 8004298:	028b      	lsls	r3, r1, #10
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a0:	4621      	mov	r1, r4
 80042a2:	028a      	lsls	r2, r1, #10
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	2200      	movs	r2, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b4:	f7fc f814 	bl	80002e0 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3740      	adds	r7, #64	@ 0x40
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	017d7840 	.word	0x017d7840

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004324:	4b69      	ldr	r3, [pc, #420]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a68      	ldr	r2, [pc, #416]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	4b66      	ldr	r3, [pc, #408]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004338:	4964      	ldr	r1, [pc, #400]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d017      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004356:	4b5d      	ldr	r3, [pc, #372]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	4959      	ldr	r1, [pc, #356]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d017      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004392:	4b4e      	ldr	r3, [pc, #312]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004398:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	494a      	ldr	r1, [pc, #296]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 808b 	beq.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b3a      	ldr	r3, [pc, #232]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	4a39      	ldr	r2, [pc, #228]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ec:	4b37      	ldr	r3, [pc, #220]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fe fa70 	bl	80028e8 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fe fa6c 	bl	80028e8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e38f      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800441e:	4b2c      	ldr	r3, [pc, #176]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800442a:	4b28      	ldr	r3, [pc, #160]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004432:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d035      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d02e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004450:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445e:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004468:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800446a:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004470:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d114      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe fa34 	bl	80028e8 <HAL_GetTick>
 8004480:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	e00a      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fe fa30 	bl	80028e8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e351      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0ee      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b2:	d111      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044c0:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044c2:	400b      	ands	r3, r1
 80044c4:	4901      	ldr	r1, [pc, #4]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	0ffffcff 	.word	0x0ffffcff
 80044d8:	4bac      	ldr	r3, [pc, #688]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4aab      	ldr	r2, [pc, #684]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	4ba9      	ldr	r3, [pc, #676]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	49a6      	ldr	r1, [pc, #664]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004502:	4ba2      	ldr	r3, [pc, #648]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004508:	4aa0      	ldr	r2, [pc, #640]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004512:	4b9e      	ldr	r3, [pc, #632]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004514:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	499b      	ldr	r1, [pc, #620]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004530:	4b96      	ldr	r3, [pc, #600]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800453e:	4993      	ldr	r1, [pc, #588]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004552:	4b8e      	ldr	r3, [pc, #568]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004560:	498a      	ldr	r1, [pc, #552]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004574:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004582:	4982      	ldr	r1, [pc, #520]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004596:	4b7d      	ldr	r3, [pc, #500]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4979      	ldr	r1, [pc, #484]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b8:	4b74      	ldr	r3, [pc, #464]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	4971      	ldr	r1, [pc, #452]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045da:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e0:	f023 020c 	bic.w	r2, r3, #12
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	4968      	ldr	r1, [pc, #416]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fc:	4b63      	ldr	r3, [pc, #396]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460a:	4960      	ldr	r1, [pc, #384]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004624:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	4957      	ldr	r1, [pc, #348]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004640:	4b52      	ldr	r3, [pc, #328]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	494f      	ldr	r1, [pc, #316]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004668:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	4946      	ldr	r1, [pc, #280]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004684:	4b41      	ldr	r3, [pc, #260]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	493e      	ldr	r1, [pc, #248]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046a6:	4b39      	ldr	r3, [pc, #228]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b4:	4935      	ldr	r1, [pc, #212]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046c8:	4b30      	ldr	r3, [pc, #192]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046d6:	492d      	ldr	r1, [pc, #180]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046ea:	4b28      	ldr	r3, [pc, #160]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f8:	4924      	ldr	r1, [pc, #144]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004708:	d101      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472a:	4b18      	ldr	r3, [pc, #96]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004730:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004738:	4914      	ldr	r1, [pc, #80]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475c:	490b      	ldr	r1, [pc, #44]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004780:	4902      	ldr	r1, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800479c:	4b8a      	ldr	r3, [pc, #552]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	4986      	ldr	r1, [pc, #536]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047c0:	4b81      	ldr	r3, [pc, #516]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d0:	497d      	ldr	r1, [pc, #500]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d006      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80d6 	beq.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ec:	4b76      	ldr	r3, [pc, #472]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a75      	ldr	r2, [pc, #468]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f8:	f7fe f876 	bl	80028e8 <HAL_GetTick>
 80047fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004800:	f7fe f872 	bl	80028e8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	@ 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e195      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004812:	4b6d      	ldr	r3, [pc, #436]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d021      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11d      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004832:	4b65      	ldr	r3, [pc, #404]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004840:	4b61      	ldr	r3, [pc, #388]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004846:	0e1b      	lsrs	r3, r3, #24
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	019a      	lsls	r2, r3, #6
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	4958      	ldr	r1, [pc, #352]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004898:	d129      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800489a:	4b4b      	ldr	r3, [pc, #300]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048a8:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ae:	0f1b      	lsrs	r3, r3, #28
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	019a      	lsls	r2, r3, #6
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	071b      	lsls	r3, r3, #28
 80048ce:	493e      	ldr	r1, [pc, #248]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048d6:	4b3c      	ldr	r3, [pc, #240]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048dc:	f023 021f 	bic.w	r2, r3, #31
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	3b01      	subs	r3, #1
 80048e6:	4938      	ldr	r1, [pc, #224]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01d      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048fa:	4b33      	ldr	r3, [pc, #204]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004908:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4926      	ldr	r1, [pc, #152]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d011      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	019a      	lsls	r2, r3, #6
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	071b      	lsls	r3, r3, #28
 800495e:	491a      	ldr	r1, [pc, #104]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004966:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004972:	f7fd ffb9 	bl	80028e8 <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800497a:	f7fd ffb5 	bl	80028e8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b64      	cmp	r3, #100	@ 0x64
 8004986:	d901      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0d8      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800498c:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 80ce 	bne.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a08      	ldr	r2, [pc, #32]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd ff9c 	bl	80028e8 <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049b2:	e00b      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049b4:	f7fd ff98 	bl	80028e8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d904      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e0bb      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049d8:	d0ec      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d12a      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a02:	4b51      	ldr	r3, [pc, #324]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a10:	4b4d      	ldr	r3, [pc, #308]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	0f1b      	lsrs	r3, r3, #28
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	4944      	ldr	r1, [pc, #272]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a3e:	4b42      	ldr	r3, [pc, #264]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	493d      	ldr	r1, [pc, #244]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a6c:	d11d      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a6e:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	0e1b      	lsrs	r3, r3, #24
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a7c:	4b32      	ldr	r3, [pc, #200]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	0f1b      	lsrs	r3, r3, #28
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	019a      	lsls	r2, r3, #6
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	4929      	ldr	r1, [pc, #164]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ab6:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ac4:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	4917      	ldr	r1, [pc, #92]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004af2:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	4911      	ldr	r1, [pc, #68]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b14:	f7fd fee8 	bl	80028e8 <HAL_GetTick>
 8004b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b1c:	f7fd fee4 	bl	80028e8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	@ 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e007      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b3a:	d1ef      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e01c      	b.n	8004b98 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	795b      	ldrb	r3, [r3, #5]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fc6a 	bl	8002448 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0204 	orr.w	r2, r2, #4
 8004b88:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e09d      	b.n	8004cee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc2:	d009      	beq.n	8004bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	e005      	b.n	8004bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fc9a 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c18:	d902      	bls.n	8004c20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e002      	b.n	8004c26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c2e:	d007      	beq.n	8004c40 <HAL_SPI_Init+0xa0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	f003 0204 	and.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b088      	sub	sp, #32
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d06:	f7fd fdef 	bl	80028e8 <HAL_GetTick>
 8004d0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d001      	beq.n	8004d20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e15c      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_Transmit+0x36>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e154      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Transmit+0x48>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e14d      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	88fa      	ldrh	r2, [r7, #6]
 8004d5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d90:	d10f      	bne.n	8004db2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d007      	beq.n	8004dd0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dd8:	d952      	bls.n	8004e80 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_Transmit+0xf2>
 8004de2:	8b7b      	ldrh	r3, [r7, #26]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d145      	bne.n	8004e74 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e0c:	e032      	b.n	8004e74 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d112      	bne.n	8004e42 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	881a      	ldrh	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e40:	e018      	b.n	8004e74 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e42:	f7fd fd51 	bl	80028e8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d803      	bhi.n	8004e5a <HAL_SPI_Transmit+0x164>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d102      	bne.n	8004e60 <HAL_SPI_Transmit+0x16a>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0b2      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1c7      	bne.n	8004e0e <HAL_SPI_Transmit+0x118>
 8004e7e:	e083      	b.n	8004f88 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Transmit+0x198>
 8004e88:	8b7b      	ldrh	r3, [r7, #26]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d177      	bne.n	8004f7e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d912      	bls.n	8004ebe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b02      	subs	r3, #2
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ebc:	e05f      	b.n	8004f7e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ee4:	e04b      	b.n	8004f7e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d12b      	bne.n	8004f4c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d912      	bls.n	8004f24 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	881a      	ldrh	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b02      	subs	r3, #2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f22:	e02c      	b.n	8004f7e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f4a:	e018      	b.n	8004f7e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4c:	f7fd fccc 	bl	80028e8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d803      	bhi.n	8004f64 <HAL_SPI_Transmit+0x26e>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Transmit+0x274>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e02d      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ae      	bne.n	8004ee6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f947 	bl	8005220 <SPI_EndRxTxTransaction>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff4:	f7fd fc78 	bl	80028e8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005004:	f7fd fc70 	bl	80028e8 <HAL_GetTick>
 8005008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800500a:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	0d1b      	lsrs	r3, r3, #20
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501a:	e055      	b.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d051      	beq.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005024:	f7fd fc60 	bl	80028e8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	429a      	cmp	r2, r3
 8005032:	d902      	bls.n	800503a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d13d      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005052:	d111      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800505c:	d004      	beq.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005066:	d107      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005080:	d10f      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e018      	b.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e002      	b.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d19a      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	200000bc 	.word	0x200000bc

080050f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005106:	f7fd fbef 	bl	80028e8 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	4413      	add	r3, r2
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005116:	f7fd fbe7 	bl	80028e8 <HAL_GetTick>
 800511a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005124:	4b3d      	ldr	r3, [pc, #244]	@ (800521c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	00da      	lsls	r2, r3, #3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	0d1b      	lsrs	r3, r3, #20
 8005134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800513c:	e061      	b.n	8005202 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005144:	d107      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005154:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d051      	beq.n	8005202 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800515e:	f7fd fbc3 	bl	80028e8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516a:	429a      	cmp	r2, r3
 800516c:	d902      	bls.n	8005174 <SPI_WaitFifoStateUntilTimeout+0x80>
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d13d      	bne.n	80051f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800518c:	d111      	bne.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005196:	d004      	beq.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a0:	d107      	bne.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ba:	d10f      	bne.n	80051dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e011      	b.n	8005214 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	e002      	b.n	8005202 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3b01      	subs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d195      	bne.n	800513e <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	@ 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	200000bc 	.word	0x200000bc

08005220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff ff5b 	bl	80050f4 <SPI_WaitFifoStateUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e046      	b.n	80052e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005254:	4b25      	ldr	r3, [pc, #148]	@ (80052ec <SPI_EndRxTxTransaction+0xcc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	@ (80052f0 <SPI_EndRxTxTransaction+0xd0>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	0d5b      	lsrs	r3, r3, #21
 8005260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005272:	d112      	bne.n	800529a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	2180      	movs	r1, #128	@ 0x80
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff feb0 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e023      	b.n	80052e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b80      	cmp	r3, #128	@ 0x80
 80052b2:	d0f2      	beq.n	800529a <SPI_EndRxTxTransaction+0x7a>
 80052b4:	e000      	b.n	80052b8 <SPI_EndRxTxTransaction+0x98>
        break;
 80052b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff15 	bl	80050f4 <SPI_WaitFifoStateUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e000      	b.n	80052e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200000bc 	.word	0x200000bc
 80052f0:	165e9f81 	.word	0x165e9f81

080052f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e049      	b.n	800539a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd fa3a 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 f900 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_ConfigClockSource+0x1c>
 80053bc:	2302      	movs	r3, #2
 80053be:	e0b4      	b.n	800552a <HAL_TIM_ConfigClockSource+0x186>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4b56      	ldr	r3, [pc, #344]	@ (8005534 <HAL_TIM_ConfigClockSource+0x190>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f8:	d03e      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0xd4>
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fe:	f200 8087 	bhi.w	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005406:	f000 8086 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x172>
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540e:	d87f      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b70      	cmp	r3, #112	@ 0x70
 8005412:	d01a      	beq.n	800544a <HAL_TIM_ConfigClockSource+0xa6>
 8005414:	2b70      	cmp	r3, #112	@ 0x70
 8005416:	d87b      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b60      	cmp	r3, #96	@ 0x60
 800541a:	d050      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x11a>
 800541c:	2b60      	cmp	r3, #96	@ 0x60
 800541e:	d877      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b50      	cmp	r3, #80	@ 0x50
 8005422:	d03c      	beq.n	800549e <HAL_TIM_ConfigClockSource+0xfa>
 8005424:	2b50      	cmp	r3, #80	@ 0x50
 8005426:	d873      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b40      	cmp	r3, #64	@ 0x40
 800542a:	d058      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x13a>
 800542c:	2b40      	cmp	r3, #64	@ 0x40
 800542e:	d86f      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b30      	cmp	r3, #48	@ 0x30
 8005432:	d064      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	2b30      	cmp	r3, #48	@ 0x30
 8005436:	d86b      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b20      	cmp	r3, #32
 800543a:	d060      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x15a>
 800543c:	2b20      	cmp	r3, #32
 800543e:	d867      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d05c      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x15a>
 8005444:	2b10      	cmp	r3, #16
 8005446:	d05a      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	e062      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800545a:	f000 f98d 	bl	8005778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800546c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	609a      	str	r2, [r3, #8]
      break;
 8005476:	e04f      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005488:	f000 f976 	bl	8005778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800549a:	609a      	str	r2, [r3, #8]
      break;
 800549c:	e03c      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 f8ea 	bl	8005684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2150      	movs	r1, #80	@ 0x50
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f943 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 80054bc:	e02c      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ca:	461a      	mov	r2, r3
 80054cc:	f000 f909 	bl	80056e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2160      	movs	r1, #96	@ 0x60
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f933 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 80054dc:	e01c      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 f8ca 	bl	8005684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2140      	movs	r1, #64	@ 0x40
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f923 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 80054fc:	e00c      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f000 f91a 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 800550e:	e003      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e000      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	fffeff88 	.word	0xfffeff88

08005538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a43      	ldr	r2, [pc, #268]	@ (8005658 <TIM_Base_SetConfig+0x120>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005556:	d00f      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a40      	ldr	r2, [pc, #256]	@ (800565c <TIM_Base_SetConfig+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3f      	ldr	r2, [pc, #252]	@ (8005660 <TIM_Base_SetConfig+0x128>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3e      	ldr	r2, [pc, #248]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3d      	ldr	r2, [pc, #244]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a32      	ldr	r2, [pc, #200]	@ (8005658 <TIM_Base_SetConfig+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d027      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2f      	ldr	r2, [pc, #188]	@ (800565c <TIM_Base_SetConfig+0x124>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d023      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <TIM_Base_SetConfig+0x128>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01f      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d017      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	@ (800566c <TIM_Base_SetConfig+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <TIM_Base_SetConfig+0x138>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <TIM_Base_SetConfig+0x13c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <TIM_Base_SetConfig+0x140>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a27      	ldr	r2, [pc, #156]	@ (800567c <TIM_Base_SetConfig+0x144>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a26      	ldr	r2, [pc, #152]	@ (8005680 <TIM_Base_SetConfig+0x148>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a0e      	ldr	r2, [pc, #56]	@ (8005658 <TIM_Base_SetConfig+0x120>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_Base_SetConfig+0xf2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a10      	ldr	r2, [pc, #64]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d103      	bne.n	8005632 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40010400 	.word	0x40010400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800
 8005678:	40001800 	.word	0x40001800
 800567c:	40001c00 	.word	0x40001c00
 8005680:	40002000 	.word	0x40002000

08005684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 030a 	bic.w	r3, r3, #10
 80056c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800570c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	031b      	lsls	r3, r3, #12
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	f043 0307 	orr.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	431a      	orrs	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e06d      	b.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a30      	ldr	r2, [pc, #192]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2f      	ldr	r2, [pc, #188]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800580a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a20      	ldr	r2, [pc, #128]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005842:	d01d      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1d      	ldr	r2, [pc, #116]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1c      	ldr	r2, [pc, #112]	@ (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1a      	ldr	r2, [pc, #104]	@ (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a15      	ldr	r2, [pc, #84]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40001800 	.word	0x40001800

080058d4 <siprintf>:
 80058d4:	b40e      	push	{r1, r2, r3}
 80058d6:	b510      	push	{r4, lr}
 80058d8:	b09d      	sub	sp, #116	@ 0x74
 80058da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80058dc:	9002      	str	r0, [sp, #8]
 80058de:	9006      	str	r0, [sp, #24]
 80058e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058e4:	480a      	ldr	r0, [pc, #40]	@ (8005910 <siprintf+0x3c>)
 80058e6:	9107      	str	r1, [sp, #28]
 80058e8:	9104      	str	r1, [sp, #16]
 80058ea:	490a      	ldr	r1, [pc, #40]	@ (8005914 <siprintf+0x40>)
 80058ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f0:	9105      	str	r1, [sp, #20]
 80058f2:	2400      	movs	r4, #0
 80058f4:	a902      	add	r1, sp, #8
 80058f6:	6800      	ldr	r0, [r0, #0]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80058fc:	f000 f994 	bl	8005c28 <_svfiprintf_r>
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	701c      	strb	r4, [r3, #0]
 8005904:	b01d      	add	sp, #116	@ 0x74
 8005906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590a:	b003      	add	sp, #12
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	200000c8 	.word	0x200000c8
 8005914:	ffff0208 	.word	0xffff0208

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	@ (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	200000c8 	.word	0x200000c8

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 fc64 	bl	8006214 <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	080c0244 	.word	0x080c0244
 8005970:	080c0244 	.word	0x080c0244
 8005974:	080c0244 	.word	0x080c0244
 8005978:	080c0248 	.word	0x080c0248

0800597c <__retarget_lock_acquire_recursive>:
 800597c:	4770      	bx	lr

0800597e <__retarget_lock_release_recursive>:
 800597e:	4770      	bx	lr

08005980 <_free_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4605      	mov	r5, r0
 8005984:	2900      	cmp	r1, #0
 8005986:	d041      	beq.n	8005a0c <_free_r+0x8c>
 8005988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598c:	1f0c      	subs	r4, r1, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfb8      	it	lt
 8005992:	18e4      	addlt	r4, r4, r3
 8005994:	f000 f8e0 	bl	8005b58 <__malloc_lock>
 8005998:	4a1d      	ldr	r2, [pc, #116]	@ (8005a10 <_free_r+0x90>)
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	b933      	cbnz	r3, 80059ac <_free_r+0x2c>
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	6014      	str	r4, [r2, #0]
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a8:	f000 b8dc 	b.w	8005b64 <__malloc_unlock>
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	d908      	bls.n	80059c2 <_free_r+0x42>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	1821      	adds	r1, r4, r0
 80059b4:	428b      	cmp	r3, r1
 80059b6:	bf01      	itttt	eq
 80059b8:	6819      	ldreq	r1, [r3, #0]
 80059ba:	685b      	ldreq	r3, [r3, #4]
 80059bc:	1809      	addeq	r1, r1, r0
 80059be:	6021      	streq	r1, [r4, #0]
 80059c0:	e7ed      	b.n	800599e <_free_r+0x1e>
 80059c2:	461a      	mov	r2, r3
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b10b      	cbz	r3, 80059cc <_free_r+0x4c>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d9fa      	bls.n	80059c2 <_free_r+0x42>
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	1850      	adds	r0, r2, r1
 80059d0:	42a0      	cmp	r0, r4
 80059d2:	d10b      	bne.n	80059ec <_free_r+0x6c>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	4401      	add	r1, r0
 80059d8:	1850      	adds	r0, r2, r1
 80059da:	4283      	cmp	r3, r0
 80059dc:	6011      	str	r1, [r2, #0]
 80059de:	d1e0      	bne.n	80059a2 <_free_r+0x22>
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	6053      	str	r3, [r2, #4]
 80059e6:	4408      	add	r0, r1
 80059e8:	6010      	str	r0, [r2, #0]
 80059ea:	e7da      	b.n	80059a2 <_free_r+0x22>
 80059ec:	d902      	bls.n	80059f4 <_free_r+0x74>
 80059ee:	230c      	movs	r3, #12
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	e7d6      	b.n	80059a2 <_free_r+0x22>
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	1821      	adds	r1, r4, r0
 80059f8:	428b      	cmp	r3, r1
 80059fa:	bf04      	itt	eq
 80059fc:	6819      	ldreq	r1, [r3, #0]
 80059fe:	685b      	ldreq	r3, [r3, #4]
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	bf04      	itt	eq
 8005a04:	1809      	addeq	r1, r1, r0
 8005a06:	6021      	streq	r1, [r4, #0]
 8005a08:	6054      	str	r4, [r2, #4]
 8005a0a:	e7ca      	b.n	80059a2 <_free_r+0x22>
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000490 	.word	0x20000490

08005a14 <sbrk_aligned>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4e0f      	ldr	r6, [pc, #60]	@ (8005a54 <sbrk_aligned+0x40>)
 8005a18:	460c      	mov	r4, r1
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	b911      	cbnz	r1, 8005a26 <sbrk_aligned+0x12>
 8005a20:	f000 fba4 	bl	800616c <_sbrk_r>
 8005a24:	6030      	str	r0, [r6, #0]
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 fb9f 	bl	800616c <_sbrk_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d103      	bne.n	8005a3a <sbrk_aligned+0x26>
 8005a32:	f04f 34ff 	mov.w	r4, #4294967295
 8005a36:	4620      	mov	r0, r4
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	1cc4      	adds	r4, r0, #3
 8005a3c:	f024 0403 	bic.w	r4, r4, #3
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d0f8      	beq.n	8005a36 <sbrk_aligned+0x22>
 8005a44:	1a21      	subs	r1, r4, r0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fb90 	bl	800616c <_sbrk_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1f2      	bne.n	8005a36 <sbrk_aligned+0x22>
 8005a50:	e7ef      	b.n	8005a32 <sbrk_aligned+0x1e>
 8005a52:	bf00      	nop
 8005a54:	2000048c 	.word	0x2000048c

08005a58 <_malloc_r>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d904      	bls.n	8005a7e <_malloc_r+0x26>
 8005a74:	230c      	movs	r3, #12
 8005a76:	6033      	str	r3, [r6, #0]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b54 <_malloc_r+0xfc>
 8005a82:	f000 f869 	bl	8005b58 <__malloc_lock>
 8005a86:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	bb44      	cbnz	r4, 8005ae0 <_malloc_r+0x88>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff ffbf 	bl	8005a14 <sbrk_aligned>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	4604      	mov	r4, r0
 8005a9a:	d158      	bne.n	8005b4e <_malloc_r+0xf6>
 8005a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005aa0:	4627      	mov	r7, r4
 8005aa2:	2f00      	cmp	r7, #0
 8005aa4:	d143      	bne.n	8005b2e <_malloc_r+0xd6>
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d04b      	beq.n	8005b42 <_malloc_r+0xea>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	eb04 0903 	add.w	r9, r4, r3
 8005ab4:	f000 fb5a 	bl	800616c <_sbrk_r>
 8005ab8:	4581      	cmp	r9, r0
 8005aba:	d142      	bne.n	8005b42 <_malloc_r+0xea>
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	1a6d      	subs	r5, r5, r1
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ffa6 	bl	8005a14 <sbrk_aligned>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d03a      	beq.n	8005b42 <_malloc_r+0xea>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	442b      	add	r3, r5
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	bb62      	cbnz	r2, 8005b34 <_malloc_r+0xdc>
 8005ada:	f8c8 7000 	str.w	r7, [r8]
 8005ade:	e00f      	b.n	8005b00 <_malloc_r+0xa8>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	1b52      	subs	r2, r2, r5
 8005ae4:	d420      	bmi.n	8005b28 <_malloc_r+0xd0>
 8005ae6:	2a0b      	cmp	r2, #11
 8005ae8:	d917      	bls.n	8005b1a <_malloc_r+0xc2>
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	6025      	str	r5, [r4, #0]
 8005af0:	bf18      	it	ne
 8005af2:	6059      	strne	r1, [r3, #4]
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	bf08      	it	eq
 8005af8:	f8c8 1000 	streq.w	r1, [r8]
 8005afc:	5162      	str	r2, [r4, r5]
 8005afe:	604b      	str	r3, [r1, #4]
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f82f 	bl	8005b64 <__malloc_unlock>
 8005b06:	f104 000b 	add.w	r0, r4, #11
 8005b0a:	1d23      	adds	r3, r4, #4
 8005b0c:	f020 0007 	bic.w	r0, r0, #7
 8005b10:	1ac2      	subs	r2, r0, r3
 8005b12:	bf1c      	itt	ne
 8005b14:	1a1b      	subne	r3, r3, r0
 8005b16:	50a3      	strne	r3, [r4, r2]
 8005b18:	e7af      	b.n	8005a7a <_malloc_r+0x22>
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	bf0c      	ite	eq
 8005b20:	f8c8 2000 	streq.w	r2, [r8]
 8005b24:	605a      	strne	r2, [r3, #4]
 8005b26:	e7eb      	b.n	8005b00 <_malloc_r+0xa8>
 8005b28:	4623      	mov	r3, r4
 8005b2a:	6864      	ldr	r4, [r4, #4]
 8005b2c:	e7ae      	b.n	8005a8c <_malloc_r+0x34>
 8005b2e:	463c      	mov	r4, r7
 8005b30:	687f      	ldr	r7, [r7, #4]
 8005b32:	e7b6      	b.n	8005aa2 <_malloc_r+0x4a>
 8005b34:	461a      	mov	r2, r3
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d1fb      	bne.n	8005b34 <_malloc_r+0xdc>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e7de      	b.n	8005b00 <_malloc_r+0xa8>
 8005b42:	230c      	movs	r3, #12
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	4630      	mov	r0, r6
 8005b48:	f000 f80c 	bl	8005b64 <__malloc_unlock>
 8005b4c:	e794      	b.n	8005a78 <_malloc_r+0x20>
 8005b4e:	6005      	str	r5, [r0, #0]
 8005b50:	e7d6      	b.n	8005b00 <_malloc_r+0xa8>
 8005b52:	bf00      	nop
 8005b54:	20000490 	.word	0x20000490

08005b58 <__malloc_lock>:
 8005b58:	4801      	ldr	r0, [pc, #4]	@ (8005b60 <__malloc_lock+0x8>)
 8005b5a:	f7ff bf0f 	b.w	800597c <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	20000488 	.word	0x20000488

08005b64 <__malloc_unlock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__malloc_unlock+0x8>)
 8005b66:	f7ff bf0a 	b.w	800597e <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000488 	.word	0x20000488

08005b70 <__ssputs_r>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	688e      	ldr	r6, [r1, #8]
 8005b76:	461f      	mov	r7, r3
 8005b78:	42be      	cmp	r6, r7
 8005b7a:	680b      	ldr	r3, [r1, #0]
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4690      	mov	r8, r2
 8005b82:	d82d      	bhi.n	8005be0 <__ssputs_r+0x70>
 8005b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b8c:	d026      	beq.n	8005bdc <__ssputs_r+0x6c>
 8005b8e:	6965      	ldr	r5, [r4, #20]
 8005b90:	6909      	ldr	r1, [r1, #16]
 8005b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b96:	eba3 0901 	sub.w	r9, r3, r1
 8005b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b9e:	1c7b      	adds	r3, r7, #1
 8005ba0:	444b      	add	r3, r9
 8005ba2:	106d      	asrs	r5, r5, #1
 8005ba4:	429d      	cmp	r5, r3
 8005ba6:	bf38      	it	cc
 8005ba8:	461d      	movcc	r5, r3
 8005baa:	0553      	lsls	r3, r2, #21
 8005bac:	d527      	bpl.n	8005bfe <__ssputs_r+0x8e>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7ff ff52 	bl	8005a58 <_malloc_r>
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	b360      	cbz	r0, 8005c12 <__ssputs_r+0xa2>
 8005bb8:	6921      	ldr	r1, [r4, #16]
 8005bba:	464a      	mov	r2, r9
 8005bbc:	f000 fae6 	bl	800618c <memcpy>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	6126      	str	r6, [r4, #16]
 8005bce:	6165      	str	r5, [r4, #20]
 8005bd0:	444e      	add	r6, r9
 8005bd2:	eba5 0509 	sub.w	r5, r5, r9
 8005bd6:	6026      	str	r6, [r4, #0]
 8005bd8:	60a5      	str	r5, [r4, #8]
 8005bda:	463e      	mov	r6, r7
 8005bdc:	42be      	cmp	r6, r7
 8005bde:	d900      	bls.n	8005be2 <__ssputs_r+0x72>
 8005be0:	463e      	mov	r6, r7
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4641      	mov	r1, r8
 8005be8:	f000 faa6 	bl	8006138 <memmove>
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	1b9b      	subs	r3, r3, r6
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4433      	add	r3, r6
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	462a      	mov	r2, r5
 8005c00:	f000 fad2 	bl	80061a8 <_realloc_r>
 8005c04:	4606      	mov	r6, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1e0      	bne.n	8005bcc <__ssputs_r+0x5c>
 8005c0a:	6921      	ldr	r1, [r4, #16]
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	f7ff feb7 	bl	8005980 <_free_r>
 8005c12:	230c      	movs	r3, #12
 8005c14:	f8ca 3000 	str.w	r3, [sl]
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e7e9      	b.n	8005bfa <__ssputs_r+0x8a>
	...

08005c28 <_svfiprintf_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	898b      	ldrh	r3, [r1, #12]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	b09d      	sub	sp, #116	@ 0x74
 8005c34:	4607      	mov	r7, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	4614      	mov	r4, r2
 8005c3a:	d510      	bpl.n	8005c5e <_svfiprintf_r+0x36>
 8005c3c:	690b      	ldr	r3, [r1, #16]
 8005c3e:	b973      	cbnz	r3, 8005c5e <_svfiprintf_r+0x36>
 8005c40:	2140      	movs	r1, #64	@ 0x40
 8005c42:	f7ff ff09 	bl	8005a58 <_malloc_r>
 8005c46:	6028      	str	r0, [r5, #0]
 8005c48:	6128      	str	r0, [r5, #16]
 8005c4a:	b930      	cbnz	r0, 8005c5a <_svfiprintf_r+0x32>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	b01d      	add	sp, #116	@ 0x74
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	2340      	movs	r3, #64	@ 0x40
 8005c5c:	616b      	str	r3, [r5, #20]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c62:	2320      	movs	r3, #32
 8005c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c6c:	2330      	movs	r3, #48	@ 0x30
 8005c6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e0c <_svfiprintf_r+0x1e4>
 8005c72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c76:	f04f 0901 	mov.w	r9, #1
 8005c7a:	4623      	mov	r3, r4
 8005c7c:	469a      	mov	sl, r3
 8005c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c82:	b10a      	cbz	r2, 8005c88 <_svfiprintf_r+0x60>
 8005c84:	2a25      	cmp	r2, #37	@ 0x25
 8005c86:	d1f9      	bne.n	8005c7c <_svfiprintf_r+0x54>
 8005c88:	ebba 0b04 	subs.w	fp, sl, r4
 8005c8c:	d00b      	beq.n	8005ca6 <_svfiprintf_r+0x7e>
 8005c8e:	465b      	mov	r3, fp
 8005c90:	4622      	mov	r2, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff ff6b 	bl	8005b70 <__ssputs_r>
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f000 80a7 	beq.w	8005dee <_svfiprintf_r+0x1c6>
 8005ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca2:	445a      	add	r2, fp
 8005ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 809f 	beq.w	8005dee <_svfiprintf_r+0x1c6>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cba:	f10a 0a01 	add.w	sl, sl, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	9307      	str	r3, [sp, #28]
 8005cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cc8:	4654      	mov	r4, sl
 8005cca:	2205      	movs	r2, #5
 8005ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd0:	484e      	ldr	r0, [pc, #312]	@ (8005e0c <_svfiprintf_r+0x1e4>)
 8005cd2:	f7fa fab5 	bl	8000240 <memchr>
 8005cd6:	9a04      	ldr	r2, [sp, #16]
 8005cd8:	b9d8      	cbnz	r0, 8005d12 <_svfiprintf_r+0xea>
 8005cda:	06d0      	lsls	r0, r2, #27
 8005cdc:	bf44      	itt	mi
 8005cde:	2320      	movmi	r3, #32
 8005ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce4:	0711      	lsls	r1, r2, #28
 8005ce6:	bf44      	itt	mi
 8005ce8:	232b      	movmi	r3, #43	@ 0x2b
 8005cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cee:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf4:	d015      	beq.n	8005d22 <_svfiprintf_r+0xfa>
 8005cf6:	9a07      	ldr	r2, [sp, #28]
 8005cf8:	4654      	mov	r4, sl
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4621      	mov	r1, r4
 8005d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d06:	3b30      	subs	r3, #48	@ 0x30
 8005d08:	2b09      	cmp	r3, #9
 8005d0a:	d94b      	bls.n	8005da4 <_svfiprintf_r+0x17c>
 8005d0c:	b1b0      	cbz	r0, 8005d3c <_svfiprintf_r+0x114>
 8005d0e:	9207      	str	r2, [sp, #28]
 8005d10:	e014      	b.n	8005d3c <_svfiprintf_r+0x114>
 8005d12:	eba0 0308 	sub.w	r3, r0, r8
 8005d16:	fa09 f303 	lsl.w	r3, r9, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	46a2      	mov	sl, r4
 8005d20:	e7d2      	b.n	8005cc8 <_svfiprintf_r+0xa0>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	1d19      	adds	r1, r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	9103      	str	r1, [sp, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfbb      	ittet	lt
 8005d2e:	425b      	neglt	r3, r3
 8005d30:	f042 0202 	orrlt.w	r2, r2, #2
 8005d34:	9307      	strge	r3, [sp, #28]
 8005d36:	9307      	strlt	r3, [sp, #28]
 8005d38:	bfb8      	it	lt
 8005d3a:	9204      	strlt	r2, [sp, #16]
 8005d3c:	7823      	ldrb	r3, [r4, #0]
 8005d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d40:	d10a      	bne.n	8005d58 <_svfiprintf_r+0x130>
 8005d42:	7863      	ldrb	r3, [r4, #1]
 8005d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d46:	d132      	bne.n	8005dae <_svfiprintf_r+0x186>
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	9203      	str	r2, [sp, #12]
 8005d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d54:	3402      	adds	r4, #2
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e1c <_svfiprintf_r+0x1f4>
 8005d5c:	7821      	ldrb	r1, [r4, #0]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4650      	mov	r0, sl
 8005d62:	f7fa fa6d 	bl	8000240 <memchr>
 8005d66:	b138      	cbz	r0, 8005d78 <_svfiprintf_r+0x150>
 8005d68:	9b04      	ldr	r3, [sp, #16]
 8005d6a:	eba0 000a 	sub.w	r0, r0, sl
 8005d6e:	2240      	movs	r2, #64	@ 0x40
 8005d70:	4082      	lsls	r2, r0
 8005d72:	4313      	orrs	r3, r2
 8005d74:	3401      	adds	r4, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7c:	4824      	ldr	r0, [pc, #144]	@ (8005e10 <_svfiprintf_r+0x1e8>)
 8005d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d82:	2206      	movs	r2, #6
 8005d84:	f7fa fa5c 	bl	8000240 <memchr>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d036      	beq.n	8005dfa <_svfiprintf_r+0x1d2>
 8005d8c:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <_svfiprintf_r+0x1ec>)
 8005d8e:	bb1b      	cbnz	r3, 8005dd8 <_svfiprintf_r+0x1b0>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	3307      	adds	r3, #7
 8005d94:	f023 0307 	bic.w	r3, r3, #7
 8005d98:	3308      	adds	r3, #8
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d9e:	4433      	add	r3, r6
 8005da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005da2:	e76a      	b.n	8005c7a <_svfiprintf_r+0x52>
 8005da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da8:	460c      	mov	r4, r1
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7a8      	b.n	8005d00 <_svfiprintf_r+0xd8>
 8005dae:	2300      	movs	r3, #0
 8005db0:	3401      	adds	r4, #1
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0c0a 	mov.w	ip, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc0:	3a30      	subs	r2, #48	@ 0x30
 8005dc2:	2a09      	cmp	r2, #9
 8005dc4:	d903      	bls.n	8005dce <_svfiprintf_r+0x1a6>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0c6      	beq.n	8005d58 <_svfiprintf_r+0x130>
 8005dca:	9105      	str	r1, [sp, #20]
 8005dcc:	e7c4      	b.n	8005d58 <_svfiprintf_r+0x130>
 8005dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7f0      	b.n	8005dba <_svfiprintf_r+0x192>
 8005dd8:	ab03      	add	r3, sp, #12
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4b0e      	ldr	r3, [pc, #56]	@ (8005e18 <_svfiprintf_r+0x1f0>)
 8005de0:	a904      	add	r1, sp, #16
 8005de2:	4638      	mov	r0, r7
 8005de4:	f3af 8000 	nop.w
 8005de8:	1c42      	adds	r2, r0, #1
 8005dea:	4606      	mov	r6, r0
 8005dec:	d1d6      	bne.n	8005d9c <_svfiprintf_r+0x174>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	065b      	lsls	r3, r3, #25
 8005df2:	f53f af2d 	bmi.w	8005c50 <_svfiprintf_r+0x28>
 8005df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005df8:	e72c      	b.n	8005c54 <_svfiprintf_r+0x2c>
 8005dfa:	ab03      	add	r3, sp, #12
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <_svfiprintf_r+0x1f0>)
 8005e02:	a904      	add	r1, sp, #16
 8005e04:	4638      	mov	r0, r7
 8005e06:	f000 f879 	bl	8005efc <_printf_i>
 8005e0a:	e7ed      	b.n	8005de8 <_svfiprintf_r+0x1c0>
 8005e0c:	080c0208 	.word	0x080c0208
 8005e10:	080c0212 	.word	0x080c0212
 8005e14:	00000000 	.word	0x00000000
 8005e18:	08005b71 	.word	0x08005b71
 8005e1c:	080c020e 	.word	0x080c020e

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4698      	mov	r8, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	3b00      	subs	r3, #0
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c8      	blx	r9
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf02      	ittt	eq
 8005e92:	68e5      	ldreq	r5, [r4, #12]
 8005e94:	6833      	ldreq	r3, [r6, #0]
 8005e96:	1aed      	subeq	r5, r5, r3
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4641      	mov	r1, r8
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c8      	blx	r9
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	@ 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f04:	2f78      	cmp	r7, #120	@ 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	@ 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d1 	beq.w	80060c0 <_printf_i+0x1c4>
 8005f1e:	2f58      	cmp	r7, #88	@ 0x58
 8005f20:	f000 80b8 	beq.w	8006094 <_printf_i+0x198>
 8005f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	@ (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060a7 	.word	0x080060a7
 8005f6c:	08005fd3 	.word	0x08005fd3
 8005f70:	08006061 	.word	0x08006061
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060c9 	.word	0x080060c9
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	08006069 	.word	0x08006069
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e09c      	b.n	80060e2 <_printf_i+0x1e6>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	6031      	str	r1, [r6, #0]
 8005fb0:	0606      	lsls	r6, r0, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xbc>
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	e003      	b.n	8005fc0 <_printf_i+0xc4>
 8005fb8:	0645      	lsls	r5, r0, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xb8>
 8005fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	da03      	bge.n	8005fcc <_printf_i+0xd0>
 8005fc4:	232d      	movs	r3, #45	@ 0x2d
 8005fc6:	426d      	negs	r5, r5
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fcc:	4858      	ldr	r0, [pc, #352]	@ (8006130 <_printf_i+0x234>)
 8005fce:	230a      	movs	r3, #10
 8005fd0:	e011      	b.n	8005ff6 <_printf_i+0xfa>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	0608      	lsls	r0, r1, #24
 8005fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fdc:	d402      	bmi.n	8005fe4 <_printf_i+0xe8>
 8005fde:	0649      	lsls	r1, r1, #25
 8005fe0:	bf48      	it	mi
 8005fe2:	b2ad      	uxthmi	r5, r5
 8005fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fe6:	4852      	ldr	r0, [pc, #328]	@ (8006130 <_printf_i+0x234>)
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	bf14      	ite	ne
 8005fec:	230a      	movne	r3, #10
 8005fee:	2308      	moveq	r3, #8
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ff6:	6866      	ldr	r6, [r4, #4]
 8005ff8:	60a6      	str	r6, [r4, #8]
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	db05      	blt.n	800600a <_printf_i+0x10e>
 8005ffe:	6821      	ldr	r1, [r4, #0]
 8006000:	432e      	orrs	r6, r5
 8006002:	f021 0104 	bic.w	r1, r1, #4
 8006006:	6021      	str	r1, [r4, #0]
 8006008:	d04b      	beq.n	80060a2 <_printf_i+0x1a6>
 800600a:	4616      	mov	r6, r2
 800600c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006010:	fb03 5711 	mls	r7, r3, r1, r5
 8006014:	5dc7      	ldrb	r7, [r0, r7]
 8006016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800601a:	462f      	mov	r7, r5
 800601c:	42bb      	cmp	r3, r7
 800601e:	460d      	mov	r5, r1
 8006020:	d9f4      	bls.n	800600c <_printf_i+0x110>
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10b      	bne.n	800603e <_printf_i+0x142>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	07df      	lsls	r7, r3, #31
 800602a:	d508      	bpl.n	800603e <_printf_i+0x142>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	6861      	ldr	r1, [r4, #4]
 8006030:	4299      	cmp	r1, r3
 8006032:	bfde      	ittt	le
 8006034:	2330      	movle	r3, #48	@ 0x30
 8006036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800603a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800603e:	1b92      	subs	r2, r2, r6
 8006040:	6122      	str	r2, [r4, #16]
 8006042:	f8cd a000 	str.w	sl, [sp]
 8006046:	464b      	mov	r3, r9
 8006048:	aa03      	add	r2, sp, #12
 800604a:	4621      	mov	r1, r4
 800604c:	4640      	mov	r0, r8
 800604e:	f7ff fee7 	bl	8005e20 <_printf_common>
 8006052:	3001      	adds	r0, #1
 8006054:	d14a      	bne.n	80060ec <_printf_i+0x1f0>
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	b004      	add	sp, #16
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	f043 0320 	orr.w	r3, r3, #32
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	4832      	ldr	r0, [pc, #200]	@ (8006134 <_printf_i+0x238>)
 800606a:	2778      	movs	r7, #120	@ 0x78
 800606c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	6831      	ldr	r1, [r6, #0]
 8006074:	061f      	lsls	r7, r3, #24
 8006076:	f851 5b04 	ldr.w	r5, [r1], #4
 800607a:	d402      	bmi.n	8006082 <_printf_i+0x186>
 800607c:	065f      	lsls	r7, r3, #25
 800607e:	bf48      	it	mi
 8006080:	b2ad      	uxthmi	r5, r5
 8006082:	6031      	str	r1, [r6, #0]
 8006084:	07d9      	lsls	r1, r3, #31
 8006086:	bf44      	itt	mi
 8006088:	f043 0320 	orrmi.w	r3, r3, #32
 800608c:	6023      	strmi	r3, [r4, #0]
 800608e:	b11d      	cbz	r5, 8006098 <_printf_i+0x19c>
 8006090:	2310      	movs	r3, #16
 8006092:	e7ad      	b.n	8005ff0 <_printf_i+0xf4>
 8006094:	4826      	ldr	r0, [pc, #152]	@ (8006130 <_printf_i+0x234>)
 8006096:	e7e9      	b.n	800606c <_printf_i+0x170>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e7f6      	b.n	8006090 <_printf_i+0x194>
 80060a2:	4616      	mov	r6, r2
 80060a4:	e7bd      	b.n	8006022 <_printf_i+0x126>
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	6825      	ldr	r5, [r4, #0]
 80060aa:	6961      	ldr	r1, [r4, #20]
 80060ac:	1d18      	adds	r0, r3, #4
 80060ae:	6030      	str	r0, [r6, #0]
 80060b0:	062e      	lsls	r6, r5, #24
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	d501      	bpl.n	80060ba <_printf_i+0x1be>
 80060b6:	6019      	str	r1, [r3, #0]
 80060b8:	e002      	b.n	80060c0 <_printf_i+0x1c4>
 80060ba:	0668      	lsls	r0, r5, #25
 80060bc:	d5fb      	bpl.n	80060b6 <_printf_i+0x1ba>
 80060be:	8019      	strh	r1, [r3, #0]
 80060c0:	2300      	movs	r3, #0
 80060c2:	6123      	str	r3, [r4, #16]
 80060c4:	4616      	mov	r6, r2
 80060c6:	e7bc      	b.n	8006042 <_printf_i+0x146>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	6032      	str	r2, [r6, #0]
 80060ce:	681e      	ldr	r6, [r3, #0]
 80060d0:	6862      	ldr	r2, [r4, #4]
 80060d2:	2100      	movs	r1, #0
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7fa f8b3 	bl	8000240 <memchr>
 80060da:	b108      	cbz	r0, 80060e0 <_printf_i+0x1e4>
 80060dc:	1b80      	subs	r0, r0, r6
 80060de:	6060      	str	r0, [r4, #4]
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	2300      	movs	r3, #0
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ea:	e7aa      	b.n	8006042 <_printf_i+0x146>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	4632      	mov	r2, r6
 80060f0:	4649      	mov	r1, r9
 80060f2:	4640      	mov	r0, r8
 80060f4:	47d0      	blx	sl
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0ad      	beq.n	8006056 <_printf_i+0x15a>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	079b      	lsls	r3, r3, #30
 80060fe:	d413      	bmi.n	8006128 <_printf_i+0x22c>
 8006100:	68e0      	ldr	r0, [r4, #12]
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	4298      	cmp	r0, r3
 8006106:	bfb8      	it	lt
 8006108:	4618      	movlt	r0, r3
 800610a:	e7a6      	b.n	800605a <_printf_i+0x15e>
 800610c:	2301      	movs	r3, #1
 800610e:	4632      	mov	r2, r6
 8006110:	4649      	mov	r1, r9
 8006112:	4640      	mov	r0, r8
 8006114:	47d0      	blx	sl
 8006116:	3001      	adds	r0, #1
 8006118:	d09d      	beq.n	8006056 <_printf_i+0x15a>
 800611a:	3501      	adds	r5, #1
 800611c:	68e3      	ldr	r3, [r4, #12]
 800611e:	9903      	ldr	r1, [sp, #12]
 8006120:	1a5b      	subs	r3, r3, r1
 8006122:	42ab      	cmp	r3, r5
 8006124:	dcf2      	bgt.n	800610c <_printf_i+0x210>
 8006126:	e7eb      	b.n	8006100 <_printf_i+0x204>
 8006128:	2500      	movs	r5, #0
 800612a:	f104 0619 	add.w	r6, r4, #25
 800612e:	e7f5      	b.n	800611c <_printf_i+0x220>
 8006130:	080c0219 	.word	0x080c0219
 8006134:	080c022a 	.word	0x080c022a

08006138 <memmove>:
 8006138:	4288      	cmp	r0, r1
 800613a:	b510      	push	{r4, lr}
 800613c:	eb01 0402 	add.w	r4, r1, r2
 8006140:	d902      	bls.n	8006148 <memmove+0x10>
 8006142:	4284      	cmp	r4, r0
 8006144:	4623      	mov	r3, r4
 8006146:	d807      	bhi.n	8006158 <memmove+0x20>
 8006148:	1e43      	subs	r3, r0, #1
 800614a:	42a1      	cmp	r1, r4
 800614c:	d008      	beq.n	8006160 <memmove+0x28>
 800614e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006156:	e7f8      	b.n	800614a <memmove+0x12>
 8006158:	4402      	add	r2, r0
 800615a:	4601      	mov	r1, r0
 800615c:	428a      	cmp	r2, r1
 800615e:	d100      	bne.n	8006162 <memmove+0x2a>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616a:	e7f7      	b.n	800615c <memmove+0x24>

0800616c <_sbrk_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d06      	ldr	r5, [pc, #24]	@ (8006188 <_sbrk_r+0x1c>)
 8006170:	2300      	movs	r3, #0
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fc fa70 	bl	800265c <_sbrk>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_sbrk_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_sbrk_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	20000484 	.word	0x20000484

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a2:	4291      	cmp	r1, r2
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <_realloc_r>:
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	4607      	mov	r7, r0
 80061ae:	4614      	mov	r4, r2
 80061b0:	460d      	mov	r5, r1
 80061b2:	b921      	cbnz	r1, 80061be <_realloc_r+0x16>
 80061b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	4611      	mov	r1, r2
 80061ba:	f7ff bc4d 	b.w	8005a58 <_malloc_r>
 80061be:	b92a      	cbnz	r2, 80061cc <_realloc_r+0x24>
 80061c0:	f7ff fbde 	bl	8005980 <_free_r>
 80061c4:	4625      	mov	r5, r4
 80061c6:	4628      	mov	r0, r5
 80061c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061cc:	f000 f81a 	bl	8006204 <_malloc_usable_size_r>
 80061d0:	4284      	cmp	r4, r0
 80061d2:	4606      	mov	r6, r0
 80061d4:	d802      	bhi.n	80061dc <_realloc_r+0x34>
 80061d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061da:	d8f4      	bhi.n	80061c6 <_realloc_r+0x1e>
 80061dc:	4621      	mov	r1, r4
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff fc3a 	bl	8005a58 <_malloc_r>
 80061e4:	4680      	mov	r8, r0
 80061e6:	b908      	cbnz	r0, 80061ec <_realloc_r+0x44>
 80061e8:	4645      	mov	r5, r8
 80061ea:	e7ec      	b.n	80061c6 <_realloc_r+0x1e>
 80061ec:	42b4      	cmp	r4, r6
 80061ee:	4622      	mov	r2, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	bf28      	it	cs
 80061f4:	4632      	movcs	r2, r6
 80061f6:	f7ff ffc9 	bl	800618c <memcpy>
 80061fa:	4629      	mov	r1, r5
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff fbbf 	bl	8005980 <_free_r>
 8006202:	e7f1      	b.n	80061e8 <_realloc_r+0x40>

08006204 <_malloc_usable_size_r>:
 8006204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006208:	1f18      	subs	r0, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	bfbc      	itt	lt
 800620e:	580b      	ldrlt	r3, [r1, r0]
 8006210:	18c0      	addlt	r0, r0, r3
 8006212:	4770      	bx	lr

08006214 <_init>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr

08006220 <_fini>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr
